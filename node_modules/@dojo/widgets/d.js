(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/lang", "@dojo/shim/Symbol", "maquette", "./FactoryRegistry"], factory);
    }
})(function (require, exports) {
    "use strict";
    var lang_1 = require("@dojo/core/lang");
    var Symbol_1 = require("@dojo/shim/Symbol");
    var maquette_1 = require("maquette");
    var FactoryRegistry_1 = require("./FactoryRegistry");
    /**
     * The symbol intifier for a WNode type
     */
    exports.WNODE = Symbol_1.default('Identifier for a WNode.');
    /**
     * The symbol intifier for a HNode type
     */
    exports.HNODE = Symbol_1.default('Identifier for a HNode.');
    /**
     * Helper function that returns true if the `DNode` is a `WNode` using the `type` property
     */
    function isWNode(child) {
        return Boolean(child && (typeof child !== 'string') && child.type === exports.WNODE);
    }
    exports.isWNode = isWNode;
    /**
     * Helper function that returns true if the `DNode` is a `Node` using the `type` property
     */
    function isHNode(child) {
        return Boolean(child && (typeof child !== 'string') && child.type === exports.HNODE);
    }
    exports.isHNode = isHNode;
    exports.registry = new FactoryRegistry_1.default();
    function w(factory, properties, children) {
        if (children === void 0) { children = []; }
        return {
            children: children,
            factory: factory,
            properties: properties,
            type: exports.WNODE
        };
    }
    exports.w = w;
    function v(tag, propertiesOrChildren, children) {
        if (propertiesOrChildren === void 0) { propertiesOrChildren = {}; }
        if (children === void 0) { children = []; }
        if (Array.isArray(propertiesOrChildren)) {
            children = propertiesOrChildren;
            propertiesOrChildren = {};
        }
        return {
            children: children,
            render: function (options) {
                if (options === void 0) { options = {}; }
                return maquette_1.h(tag, lang_1.assign(options, propertiesOrChildren), this.children);
            },
            type: exports.HNODE
        };
    }
    exports.v = v;
});
//# sourceMappingURL=d.js.map