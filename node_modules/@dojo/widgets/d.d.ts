import { VNodeProperties } from '@dojo/interfaces/vdom';
import { DNode, HNode, WNode, Widget, WidgetProperties, WidgetFactory } from './interfaces';
import FactoryRegistry from './FactoryRegistry';
/**
 * The symbol intifier for a WNode type
 */
export declare const WNODE: symbol;
/**
 * The symbol intifier for a HNode type
 */
export declare const HNODE: symbol;
/**
 * Helper function that returns true if the `DNode` is a `WNode` using the `type` property
 */
export declare function isWNode(child: DNode): child is WNode;
/**
 * Helper function that returns true if the `DNode` is a `Node` using the `type` property
 */
export declare function isHNode(child: DNode): child is HNode;
export declare const registry: FactoryRegistry;
export declare function w<P extends WidgetProperties>(factory: WidgetFactory<Widget<P>, P> | string, properties: P): WNode;
export declare function w<P extends WidgetProperties>(factory: WidgetFactory<Widget<P>, P> | string, properties: P, children?: DNode[]): WNode;
export declare function v(tag: string, properties: VNodeProperties, children?: DNode[]): HNode;
export declare function v(tag: string, children: DNode[]): HNode;
export declare function v(tag: string): HNode;
