{"version":3,"file":"FactoryRegistry.js","sourceRoot":"","sources":["FactoryRegistry.ts"],"names":[],"mappings":";;;;;;;;;;IAAA,iDAAyD;IACzD,8CAAyC;IACzC,sCAAiC;IAQjC;QAGC;YACC,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAG,EAA+B,CAAC;QACxD,CAAC;QAED,6BAAG,GAAH,UAAI,YAAoB;YACvB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACxC,CAAC;QAED,gCAAM,GAAN,UAAO,YAAoB,EAAE,YAAiC;YAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACrC,MAAM,IAAI,KAAK,CAAC,8CAA4C,YAAY,MAAG,CAAC,CAAC;YAC9E,CAAC;YACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAC/C,CAAC;QAED,6BAAG,GAAH,UAAI,YAAoB;YAAxB,iBAoBC;YAnBA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAE7C,EAAE,CAAC,CAAC,0BAAgB,CAAC,IAAI,CAAC,IAAI,IAAI,YAAY,iBAAO,CAAC,CAAC,CAAC;gBACvD,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAED,IAAM,OAAO,GAA4B,IAAK,EAAE,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YAEzC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,OAAO;gBAC3B,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBACzC,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC,EAAE,UAAC,KAAK;gBACR,MAAM,KAAK,CAAC;YACb,CAAC,CAAC,CAAC;QACJ,CAAC;QACF,sBAAC;IAAD,CAAC,AAvCD,IAuCC","sourcesContent":["import { isComposeFactory } from '@dojo/compose/compose';\nimport Promise from '@dojo/shim/Promise';\nimport Map from '@dojo/shim/Map';\nimport {\n\tWidgetBaseFactory,\n\tFactoryRegistryInterface,\n\tFactoryRegistryItem,\n\tWidgetFactoryFunction\n} from './interfaces';\n\nexport default class FactoryRegistry implements FactoryRegistryInterface {\n\tprotected registry: Map<string, FactoryRegistryItem>;\n\n\tconstructor() {\n\t\tthis.registry = new Map<string, FactoryRegistryItem>();\n\t}\n\n\thas(factoryLabel: string): boolean {\n\t\treturn this.registry.has(factoryLabel);\n\t}\n\n\tdefine(factoryLabel: string, registryItem: FactoryRegistryItem): void {\n\t\tif (this.registry.has(factoryLabel)) {\n\t\t\tthrow new Error(`factory has already been registered for '${factoryLabel}'`);\n\t\t}\n\t\tthis.registry.set(factoryLabel, registryItem);\n\t}\n\n\tget(factoryLabel: string): WidgetBaseFactory | Promise<WidgetBaseFactory> | null {\n\t\tif (!this.has(factoryLabel)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = this.registry.get(factoryLabel);\n\n\t\tif (isComposeFactory(item) || item instanceof Promise) {\n\t\t\treturn item;\n\t\t}\n\n\t\tconst promise = (<WidgetFactoryFunction> item)();\n\t\tthis.registry.set(factoryLabel, promise);\n\n\t\treturn promise.then((factory) => {\n\t\t\tthis.registry.set(factoryLabel, factory);\n\t\t\treturn factory;\n\t\t}, (error) => {\n\t\t\tthrow error;\n\t\t});\n\t}\n}\n"]}