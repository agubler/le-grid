import { ComposeFactory } from '@dojo/compose/compose';
import { Bundle, Messages } from '@dojo/i18n/i18n';
import { NodeAttributeFunction, Widget, WidgetOptions, WidgetProperties } from '../interfaces';
export interface I18nMixin<M extends Messages> {
    /**
     * An array of node attribute functions which return additional attributes that should be mixed into
     * the final VNode during a render call. In this particular case, the node's `dir` attribute is optionally
     * set when `state.rtl` is a boolean, and the node's `data-locale` attribute is set when `state.locale` is
     * not empty.
     */
    nodeAttributes: NodeAttributeFunction<I18nWidget<M, I18nProperties>>[];
    /**
     * Return the cached messages for the specified bundle for the current locale, assuming they have already
     * benn loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state
     * is updated.
     *
     * @param bundle
     * The required bundle object for which available locale messages should be loaded.
     *
     * @return
     * The localized messages, along with a `format` method for formatting ICU-formatted templates.
     */
    localizeBundle(bundle: Bundle<M>): LocalizedMessages<M>;
}
export interface I18nFactory extends ComposeFactory<I18nMixin<Messages>, WidgetOptions<I18nProperties>> {
}
export interface I18nProperties extends WidgetProperties {
    /**
     * The locale for the widget. Is not specified, then the root locale (as determined by `@dojo/i18n`) is assumed.
     * If specified, the widget's node will have a `data-locale` property set to the locale, in order to facilitate
     * styling localized components if the use case arises.
     */
    locale?: string;
    /**
     * An optional flag indicating the widget's text direction. If `true`, then the underlying node's `dir`
     * property is set to "rtl". If it is `false`, then the `dir` property is set to "ltr". Otherwise, the property
     * is not set.
     */
    rtl?: boolean;
}
export declare type I18nWidget<M extends Messages, P extends I18nProperties> = I18nMixin<M> & Widget<I18nProperties>;
export declare type LocalizedMessages<T extends Messages> = T & {
    /**
     * Formats an ICU-formatted message template for the represented bundle.
     *
     * @param key
     * The message key.
     *
     * @param options
     * The values to pass to the formatter.
     *
     * @return
     * The formatted string.
     */
    format(key: string, options?: any): string;
};
declare const createI18nMixin: I18nFactory;
export default createI18nMixin;
