(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/compose/compose", "@dojo/core/lang", "@dojo/i18n/i18n"], factory);
    }
})(function (require, exports) {
    "use strict";
    /* tslint:disable:interface-name */
    var compose_1 = require("@dojo/compose/compose");
    var lang_1 = require("@dojo/core/lang");
    var i18n_1 = require("@dojo/i18n/i18n");
    /**
     * @private
     * Return the cached dictionary for the specified bundle and locale, if it exists. If the requested dictionary does not
     * exist, then load it and update the instance's state with the appropriate messages.
     *
     * @param instance
     * The widget instance.
     *
     * @param bundle
     * The bundle for which to load a locale-specific dictionary.
     *
     * @return
     * The locale-specific dictionary, if it has already been loaded and cached.
     */
    function getLocaleMessages(instance, bundle) {
        var properties = instance.properties;
        var locale = properties.locale || i18n_1.default.locale;
        var localeMessages = i18n_1.getCachedMessages(bundle, locale);
        if (localeMessages) {
            return localeMessages;
        }
        i18n_1.default(bundle, locale).then(function () {
            instance.invalidate();
        });
    }
    var createI18nMixin = compose_1.default({
        nodeAttributes: [
            function (attributes) {
                var vNodeProperties = {
                    'data-locale': null,
                    dir: null
                };
                var _a = this.properties, locale = _a.locale, rtl = _a.rtl;
                if (typeof rtl === 'boolean') {
                    vNodeProperties['dir'] = rtl ? 'rtl' : 'ltr';
                }
                if (locale) {
                    vNodeProperties['data-locale'] = locale;
                }
                return vNodeProperties;
            }
        ],
        localizeBundle: function (bundle) {
            var locale = this.properties.locale;
            var messages = getLocaleMessages(this, bundle) || bundle.messages;
            return lang_1.assign(Object.create({
                format: function (key, options) {
                    return i18n_1.formatMessage(bundle.bundlePath, key, options, locale);
                }
            }), messages);
        }
    }, function (instance) {
        var subscription = i18n_1.observeLocale({
            next: function () {
                if (!instance.properties.locale) {
                    instance.invalidate();
                }
            }
        });
        instance.own({
            destroy: function () {
                subscription.unsubscribe();
            }
        });
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createI18nMixin;
});
//# sourceMappingURL=createI18nMixin.js.map