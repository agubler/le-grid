{"version":3,"file":"shallowPropertyComparisonMixin.js","sourceRoot":"","sources":["shallowPropertyComparisonMixin.ts"],"names":[],"mappings":";;;;;;;;;;IAAA,4CAA4C;IAE5C,wCAA6C;IAE7C;;OAEG;IACH,kBAAkB,KAAU;QAC3B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;IACpE,CAAC;IAED;;OAEG;IACH,wBAAwB,IAAS,EAAE,EAAO;QACzC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC;IAChE,CAAC;IAED;;;;;;;;;OASG;IACH,IAAM,8BAA8B,GAAoD;QACvF,KAAK,EAAE;YACN,cAAc,EAAd,UAA2B,kBAAoC,EAAE,aAA+B;gBAC/F,IAAM,WAAW,GAAa,EAAE,CAAC;gBAEjC,gBAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;wBAAX,WAAG,EAAE,aAAK;oBAC1C,IAAI,OAAO,GAAG,IAAI,CAAC;oBACnB,EAAE,CAAC,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC5C,IAAM,eAAa,GAAU,kBAAmB,CAAC,GAAG,CAAC,CAAC;wBACtD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,eAAa,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,eAAa,CAAC,MAAM,CAAC,CAAC,CAAC;gCAC3C,OAAO,GAAG,KAAK,CAAC;4BACjB,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,UAAC,IAAS,EAAE,KAAa;oCAC9C,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wCACpB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,eAAa,CAAC,KAAK,CAAC,CAAC,CAAC;oCACnD,CAAC;oCACD,IAAI,CAAC,CAAC;wCACL,MAAM,CAAC,IAAI,KAAK,eAAa,CAAC,KAAK,CAAC,CAAC;oCACtC,CAAC;gCACF,CAAC,CAAC,CAAC;4BACJ,CAAC;wBACF,CAAC;wBACD,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,eAAa,CAAC,CAAC,CAAC,CAAC;4BACrD,OAAO,GAAG,cAAc,CAAC,KAAK,EAAE,eAAa,CAAC,CAAC;wBAChD,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,OAAO,GAAG,KAAK,KAAK,eAAa,CAAC;wBACnC,CAAC;oBACF,CAAC;oBACD,IAAI,CAAC,CAAC;wBACL,OAAO,GAAG,KAAK,CAAC;oBACjB,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACd,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACvB,CAAC;gBACF,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC;oBACN,WAAW,aAAA;oBACX,UAAU,EAAE,iBAAU,CAAC,EAAE,EAAE,aAAa,CAAC;iBACzC,CAAC;YACH,CAAC;SACD;KACD,CAAC;;IAEF,kBAAe,8BAA8B,CAAC","sourcesContent":["import { entries } from '@dojo/shim/object';\nimport { WidgetProperties, PropertyComparison, PropertiesChangeRecord } from './../interfaces';\nimport { deepAssign } from '@dojo/core/lang';\n\n/**\n * Determine if the value is an Object\n */\nfunction isObject(value: any) {\n\treturn Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * Shallow comparison of all keys on the objects\n */\nfunction shallowCompare(from: any, to: any) {\n\treturn Object.keys(from).every((key) => from[key] === to[key]);\n}\n\n/**\n * Mixin that overrides the `processProperties` method providing a comparison of attributes that goes a level deeper for\n * arrays and objects.\n *\n * For Objects, values for all `keys` are compared against the equivalent `key` on the `previousProperties`\n * attribute using `===`. If the `key` does not exists on the `previousProperties` attribute it is considered unequal.\n *\n * For Arrays, each `item` is compared with the `item` in the equivalent `index` of the `previousProperties` attribute.\n * If the `item` is an `object` then the object comparison described above is applied otherwise a simple `===` is used.\n */\nconst shallowPropertyComparisonMixin: { mixin: PropertyComparison<WidgetProperties> } = {\n\tmixin: {\n\t\tdiffProperties<S>(this: S, previousProperties: WidgetProperties, newProperties: WidgetProperties): PropertiesChangeRecord<WidgetProperties> {\n\t\t\tconst changedKeys: string[] = [];\n\n\t\t\tentries(newProperties).forEach(([key, value]) => {\n\t\t\t\tlet isEqual = true;\n\t\t\t\tif (previousProperties.hasOwnProperty(key)) {\n\t\t\t\t\tconst previousValue = (<any> previousProperties)[key];\n\t\t\t\t\tif (Array.isArray(value) && Array.isArray(previousValue)) {\n\t\t\t\t\t\tif (value.length !== previousValue.length) {\n\t\t\t\t\t\t\tisEqual = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tisEqual = value.every((item: any, index: number) => {\n\t\t\t\t\t\t\t\tif (isObject(item)) {\n\t\t\t\t\t\t\t\t\treturn shallowCompare(item, previousValue[index]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\treturn item === previousValue[index];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (isObject(value) && isObject(previousValue)) {\n\t\t\t\t\t\tisEqual = shallowCompare(value, previousValue);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tisEqual = value === previousValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tisEqual = false;\n\t\t\t\t}\n\t\t\t\tif (!isEqual) {\n\t\t\t\t\tchangedKeys.push(key);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tchangedKeys,\n\t\t\t\tproperties: deepAssign({}, newProperties)\n\t\t\t};\n\t\t}\n\t}\n};\n\nexport default shallowPropertyComparisonMixin;\n"]}