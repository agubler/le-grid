{"version":3,"file":"createProjectorMixin.js","sourceRoot":"","sources":["createProjectorMixin.ts"],"names":[],"mappings":"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","sourcesContent":["import global from '@dojo/core/global';\nimport compose, { ComposeFactory } from '@dojo/compose/compose';\nimport { EventTargettedObject, Handle } from '@dojo/interfaces/core';\nimport { VNode, VNodeProperties } from '@dojo/interfaces/vdom';\nimport Promise from '@dojo/shim/Promise';\nimport WeakMap from '@dojo/shim/WeakMap';\nimport { createProjector as createMaquetteProjector, Projector as MaquetteProjector } from 'maquette';\nimport { Widget, WidgetOptions, WidgetProperties } from '../interfaces';\n/**\n * Represents the state of the projector\n */\nexport enum ProjectorState {\n\tAttached = 1,\n\tDetached\n};\n\n/**\n * Attach type for the projector\n */\nexport enum AttachType {\n\tAppend = 1,\n\tMerge = 2,\n\tReplace = 3\n};\n\nexport interface AttachOptions {\n\n\t/**\n\t * If `'append'` it will append to the root. If `'merge'` it will merge with the root. If `'replace'` it will\n\t * replace the root.\n\t */\n\ttype: AttachType;\n}\n\n/**\n * Projector interface\n */\nexport interface ProjectorOptions extends WidgetOptions<WidgetProperties> {\n\n\t/**\n\t * An optional root of the projector\n\t */\n\troot?: Element;\n\n\t/**\n\t * If `true`, will configure the projector to support css transitions using `cssTransitions` global object.\n\t * The projector will fail create if the options is true but the global object cannot be found.\n\t */\n\tcssTransitions?: boolean;\n}\n\nexport interface ProjectorMixin {\n\n\t/**\n\t * Append the projector to the root.\n\t */\n\tappend(): Promise<Handle>;\n\n\t/**\n\t * Merge the projector onto the root.\n\t */\n\tmerge(): Promise<Handle>;\n\n\t/**\n\t * Replace the root with the projector node.\n\t *\n\t *\n\t */\n\treplace(): Promise<Handle>;\n\n\t/**\n\t * Root element to attach the projector\n\t */\n\troot: Element;\n\n\t/**\n\t * The Maquette projector\n\t */\n\treadonly projector: MaquetteProjector;\n\n\t/**\n\t * The status of the projector\n\t */\n\treadonly projectorState: ProjectorState;\n}\n\n/**\n * Internal projector state\n */\ninterface ProjectorData {\n\tprojector: MaquetteProjector;\n\troot: Element;\n\tstate: ProjectorState;\n\tattachPromise?: Promise<Handle>;\n\tattachHandle?: Handle;\n\tafterCreate?: () => void;\n}\n\nexport type Projector = Widget<WidgetProperties> & ProjectorMixin;\n\nexport interface ProjectorMixinFactory extends ComposeFactory<ProjectorMixin, ProjectorOptions> {}\n\n/**\n * Private state map keyed by instance.\n */\nconst projectorDataMap = new WeakMap<Projector, ProjectorData>();\n\n/**\n * Schedules a render.\n */\nfunction scheduleRender(event: EventTargettedObject<Projector>) {\n\tconst { target: projector } = event;\n\tconst projectorData = projectorDataMap.get(projector);\n\tif (projectorData.state === ProjectorState.Attached) {\n\t\tprojector.emit({\n\t\t\ttype: 'render:scheduled',\n\t\t\ttarget: projector\n\t\t});\n\t\tprojectorData.projector.scheduleRender();\n\t}\n}\n\nfunction attach(instance: Projector, { type }: AttachOptions) {\n\tconst projectorData = projectorDataMap.get(instance);\n\tconst render = instance.__render__.bind(instance);\n\n\tif (projectorData.state === ProjectorState.Attached) {\n\t\treturn projectorData.attachPromise || Promise.resolve({});\n\t}\n\tprojectorData.state = ProjectorState.Attached;\n\n\tprojectorData.attachHandle = instance.own({\n\t\tdestroy() {\n\t\t\tif (projectorData.state === ProjectorState.Attached) {\n\t\t\t\tprojectorData.projector.stop();\n\t\t\t\tprojectorData.projector.detach(render);\n\t\t\t\tprojectorData.state = ProjectorState.Detached;\n\t\t\t}\n\t\t\tprojectorData.attachHandle = { destroy() { } };\n\t\t}\n\t});\n\n\tprojectorData.attachPromise = new Promise((resolve, reject) => {\n\t\tprojectorData.afterCreate = () => {\n\t\t\tinstance.emit({\n\t\t\t\ttype: 'projector:attached',\n\t\t\t\ttarget: instance\n\t\t\t});\n\t\t\tresolve(projectorData.attachHandle);\n\t\t};\n\t});\n\n\tswitch (type) {\n\t\tcase AttachType.Append:\n\t\t\tprojectorData.projector.append(projectorData.root, render);\n\t\t\tbreak;\n\t\tcase AttachType.Merge:\n\t\t\tprojectorData.projector.merge(projectorData.root, render);\n\t\t\tbreak;\n\t\tcase AttachType.Replace:\n\t\t\tprojectorData.projector.replace(projectorData.root, render);\n\t\t\tbreak;\n\t}\n\n\treturn projectorData.attachPromise;\n}\n\nconst createProjectorMixin: ProjectorMixinFactory = compose<ProjectorMixin, ProjectorOptions>({\n\tappend(this: Projector) {\n\t\tconst options = {\n\t\t\ttype: AttachType.Append\n\t\t};\n\n\t\treturn attach(this, options);\n\t},\n\tmerge(this: Projector) {\n\t\tconst options = {\n\t\t\ttype: AttachType.Merge\n\t\t};\n\n\t\treturn attach(this, options);\n\t},\n\treplace(this: Projector) {\n\t\tconst options = {\n\t\t\ttype: AttachType.Replace\n\t\t};\n\n\t\treturn attach(this, options);\n\t},\n\tset root(this: Projector, root: Element) {\n\t\tconst projectorData = projectorDataMap.get(this);\n\t\tif (projectorData.state === ProjectorState.Attached) {\n\t\t\tthrow new Error('Projector already attached, cannot change root element');\n\t\t}\n\t\tprojectorData.root = root;\n\t},\n\tget root(this: Projector): Element {\n\t\tconst projectorData = projectorDataMap.get(this);\n\t\treturn projectorData && projectorData.root;\n\t},\n\tget projector(this: Projector): MaquetteProjector {\n\t\treturn projectorDataMap.get(this).projector;\n\t},\n\tget projectorState(this: Projector): ProjectorState {\n\t\tconst projectorData = projectorDataMap.get(this);\n\t\treturn projectorData && projectorData.state;\n\t}\n}).mixin({\n\tmixin: {\n\t\tnodeAttributes: [\n\t\t\tfunction (this: Projector): VNodeProperties {\n\t\t\t\tconst { afterCreate } = projectorDataMap.get(this);\n\t\t\t\treturn { afterCreate };\n\t\t\t}\n\t\t]\n\t},\n\taspectAdvice: {\n\t\tafter: {\n\t\t\t__render__(this: Projector, result: VNode | string | null) {\n\t\t\t\tif (typeof result === 'string' || result === null) {\n\t\t\t\t\tthrow new Error('Must provide a VNode at the root of a projector');\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n}).mixin({\n\tinitialize(instance: Projector, options: ProjectorOptions = {}) {\n\t\tconst { root = document.body, cssTransitions = false } = options;\n\t\tconst maquetteProjectorOptions: { transitions?: any } = {};\n\n\t\tif (cssTransitions) {\n\t\t\tif (global.cssTransitions) {\n\t\t\t\tmaquetteProjectorOptions.transitions = global.cssTransitions;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Unable to create projector with css transitions enabled. Is the \\'css-transition.js\\' script loaded in the page?');\n\t\t\t}\n\t\t}\n\n\t\tinstance.own(instance.on('widget:children', instance.invalidate));\n\t\tinstance.own(instance.on('invalidated', scheduleRender));\n\n\t\tconst projector = createMaquetteProjector(maquetteProjectorOptions);\n\n\t\tprojectorDataMap.set(instance, {\n\t\t\tprojector,\n\t\t\troot,\n\t\t\tstate: ProjectorState.Detached\n\t\t});\n\t}\n});\n\nexport default createProjectorMixin;\n"]}