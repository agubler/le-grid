{"version":3,"file":"createI18nMixin.js","sourceRoot":"","sources":["createI18nMixin.ts"],"names":[],"mappings":";;;;;;;;;;IAAA,mCAAmC;IACnC,iDAAgE;IAChE,wCAAyC;IACzC,wCAA0G;IAwE1G;;;;;;;;;;;;;OAaG;IACH,2BAA2B,QAA8C,EAAE,MAAwB;QAC1F,IAAA,gCAAU,CAAc;QAChC,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,IAAI,cAAI,CAAC,MAAM,CAAC;QAChD,IAAM,cAAc,GAAG,wBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAEzD,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,cAAc,CAAC;QACvB,CAAC;QAED,cAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC;YACzB,QAAQ,CAAC,UAAU,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,IAAM,eAAe,GAAgB,iBAAO,CAAqD;QAChG,cAAc,EAAE;YACf,UAAsD,UAA2B;gBAChF,IAAM,eAAe,GAAG;oBACvB,aAAa,EAAE,IAAI;oBACnB,GAAG,EAAE,IAAI;iBACc,CAAC;gBACnB,IAAA,oBAAiC,EAA/B,kBAAM,EAAE,YAAG,CAAqB;gBAExC,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC9B,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC;gBAC9C,CAAC;gBAED,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACZ,eAAe,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC;gBACzC,CAAC;gBAED,MAAM,CAAC,eAAe,CAAC;YACxB,CAAC;SACD;QAED,cAAc,EAAd,UAA2D,MAAwB;YAC1E,IAAA,+BAAM,CAAqB;YACnC,IAAM,QAAQ,GAAG,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC;YAEpE,MAAM,CAAC,aAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC3B,MAAM,YAAC,GAAW,EAAE,OAAa;oBAChC,MAAM,CAAC,oBAAa,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC/D,CAAC;aACD,CAAC,EAAE,QAAQ,CAAC,CAAC;QACf,CAAC;KACD,EAAE,UAAC,QAA8C;QACjD,IAAM,YAAY,GAAG,oBAAa,CAAC;YAClC,IAAI;gBACH,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjC,QAAQ,CAAC,UAAU,EAAE,CAAC;gBACvB,CAAC;YACF,CAAC;SACD,CAAC,CAAC;QACH,QAAQ,CAAC,GAAG,CAAC;YACZ,OAAO;gBACN,YAAY,CAAC,WAAW,EAAE,CAAC;YAC5B,CAAC;SACD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;;IAEH,kBAAe,eAAe,CAAC","sourcesContent":["/* tslint:disable:interface-name */\nimport compose, { ComposeFactory } from '@dojo/compose/compose';\nimport { assign } from '@dojo/core/lang';\nimport i18n, { Bundle, formatMessage, getCachedMessages, Messages, observeLocale } from '@dojo/i18n/i18n';\nimport { VNodeProperties } from 'maquette';\nimport { NodeAttributeFunction, Widget, WidgetOptions, WidgetProperties } from '../interfaces';\n\nexport interface I18nMixin<M extends Messages> {\n\t/**\n\t * An array of node attribute functions which return additional attributes that should be mixed into\n\t * the final VNode during a render call. In this particular case, the node's `dir` attribute is optionally\n\t * set when `state.rtl` is a boolean, and the node's `data-locale` attribute is set when `state.locale` is\n\t * not empty.\n\t */\n\tnodeAttributes: NodeAttributeFunction<I18nWidget<M, I18nProperties>>[];\n\n\t/**\n\t * Return the cached messages for the specified bundle for the current locale, assuming they have already\n\t * benn loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state\n\t * is updated.\n\t *\n\t * @param bundle\n\t * The required bundle object for which available locale messages should be loaded.\n\t *\n\t * @return\n\t * The localized messages, along with a `format` method for formatting ICU-formatted templates.\n\t */\n\tlocalizeBundle(bundle: Bundle<M>): LocalizedMessages<M>;\n}\n\nexport interface I18nFactory extends ComposeFactory<I18nMixin<Messages>, WidgetOptions<I18nProperties>> {}\n\nexport interface I18nProperties extends WidgetProperties {\n\t/**\n\t * The locale for the widget. Is not specified, then the root locale (as determined by `@dojo/i18n`) is assumed.\n\t * If specified, the widget's node will have a `data-locale` property set to the locale, in order to facilitate\n\t * styling localized components if the use case arises.\n\t */\n\tlocale?: string;\n\n\t/**\n\t * An optional flag indicating the widget's text direction. If `true`, then the underlying node's `dir`\n\t * property is set to \"rtl\". If it is `false`, then the `dir` property is set to \"ltr\". Otherwise, the property\n\t * is not set.\n\t */\n\trtl?: boolean;\n}\n\n/**\n * @private\n * An internal helper interface for defining locale and text direction attributes on widget nodes.\n */\ninterface I18nVNodeProperties extends VNodeProperties {\n\t'data-locale': string | null;\n\tdir: string | null;\n}\n\nexport type I18nWidget<M extends Messages, P extends I18nProperties> = I18nMixin<M> & Widget<I18nProperties>;\n\nexport type LocalizedMessages<T extends Messages> = T & {\n\t/**\n\t * Formats an ICU-formatted message template for the represented bundle.\n\t *\n\t * @param key\n\t * The message key.\n\t *\n\t * @param options\n\t * The values to pass to the formatter.\n\t *\n\t * @return\n\t * The formatted string.\n\t */\n\tformat(key: string, options?: any): string;\n}\n\n/**\n * @private\n * Return the cached dictionary for the specified bundle and locale, if it exists. If the requested dictionary does not\n * exist, then load it and update the instance's state with the appropriate messages.\n *\n * @param instance\n * The widget instance.\n *\n * @param bundle\n * The bundle for which to load a locale-specific dictionary.\n *\n * @return\n * The locale-specific dictionary, if it has already been loaded and cached.\n */\nfunction getLocaleMessages(instance: I18nWidget<Messages, I18nProperties>, bundle: Bundle<Messages>): Messages | void {\n\tconst { properties } = instance;\n\tconst locale = properties.locale || i18n.locale;\n\tconst localeMessages = getCachedMessages(bundle, locale);\n\n\tif (localeMessages) {\n\t\treturn localeMessages;\n\t}\n\n\ti18n(bundle, locale).then(() => {\n\t\tinstance.invalidate();\n\t});\n}\n\nconst createI18nMixin: I18nFactory = compose<I18nMixin<Messages>, WidgetOptions<I18nProperties>>({\n\tnodeAttributes: [\n\t\tfunction (this: I18nWidget<Messages, I18nProperties>, attributes: VNodeProperties): VNodeProperties {\n\t\t\tconst vNodeProperties = {\n\t\t\t\t'data-locale': null,\n\t\t\t\tdir: null\n\t\t\t} as I18nVNodeProperties;\n\t\t\tconst { locale, rtl } = this.properties;\n\n\t\t\tif (typeof rtl === 'boolean') {\n\t\t\t\tvNodeProperties['dir'] = rtl ? 'rtl' : 'ltr';\n\t\t\t}\n\n\t\t\tif (locale) {\n\t\t\t\tvNodeProperties['data-locale'] = locale;\n\t\t\t}\n\n\t\t\treturn vNodeProperties;\n\t\t}\n\t],\n\n\tlocalizeBundle(this: I18nWidget<Messages, I18nProperties>, bundle: Bundle<Messages>): LocalizedMessages<Messages> {\n\t\tconst { locale } = this.properties;\n\t\tconst messages = getLocaleMessages(this, bundle) || bundle.messages;\n\n\t\treturn assign(Object.create({\n\t\t\tformat(key: string, options?: any) {\n\t\t\t\treturn formatMessage(bundle.bundlePath, key, options, locale);\n\t\t\t}\n\t\t}), messages);\n\t}\n}, (instance: I18nWidget<Messages, I18nProperties>) => {\n\tconst subscription = observeLocale({\n\t\tnext() {\n\t\t\tif (!instance.properties.locale) {\n\t\t\t\tinstance.invalidate();\n\t\t\t}\n\t\t}\n\t});\n\tinstance.own({\n\t\tdestroy() {\n\t\t\tsubscription.unsubscribe();\n\t\t}\n\t});\n});\n\nexport default createI18nMixin;\n"]}