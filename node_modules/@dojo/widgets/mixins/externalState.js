(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/WeakMap", "@dojo/shim/array", "@dojo/core/lang", "@dojo/compose/bases/createEvented"], factory);
    }
})(function (require, exports) {
    "use strict";
    var WeakMap_1 = require("@dojo/shim/WeakMap");
    var array_1 = require("@dojo/shim/array");
    var lang_1 = require("@dojo/core/lang");
    var createEvented_1 = require("@dojo/compose/bases/createEvented");
    /**
     * Private map for external state.
     */
    var internalStateMap = new WeakMap_1.default();
    /**
     * State Map
     */
    var stateMap = new WeakMap_1.default();
    /**
     * state changed event type
     */
    var stateChangedEventType = 'state:changed';
    function replaceState(instance, state) {
        var internalState = stateMap.get(instance);
        if (internalState) {
            internalState.state = state;
            var eventObject = {
                type: stateChangedEventType,
                state: state,
                target: instance
            };
            instance.emit(eventObject);
        }
    }
    function onPropertiesChanged(instance, properties, changedPropertyKeys) {
        var internalState = internalStateMap.get(instance);
        if (internalState) {
            if (array_1.includes(changedPropertyKeys, 'externalState') || array_1.includes(changedPropertyKeys, 'id')) {
                internalState.handle.destroy();
            }
        }
        instance.observe();
    }
    /**
     * ExternalState Factory
     */
    var externalStateFactory = createEvented_1.default.mixin({
        className: 'ExternalStateMixin',
        mixin: {
            get state() {
                return stateMap.get(this).state;
            },
            observe: function () {
                var _this = this;
                var internalState = internalStateMap.get(this);
                var _a = this.properties, _b = _a.id, id = _b === void 0 ? 'all' : _b, externalState = _a.externalState;
                if (!externalState) {
                    throw new Error('externalState are required to observe state');
                }
                if (internalState) {
                    if (internalState.id === id) {
                        return;
                    }
                    throw new Error('Unable to observe state for a different id');
                }
                var observer = id !== 'all' ? externalState.observe(id) : externalState.observe();
                var subscription = observer
                    .subscribe(function (state) {
                    replaceState(_this, state);
                }, function (err) {
                    throw err;
                });
                var handle = {
                    destroy: function () {
                        subscription.unsubscribe();
                        internalStateMap.delete(_this);
                    }
                };
                internalStateMap.set(this, { id: id, handle: handle });
                this.own(handle);
            },
            setState: function (newState) {
                var _this = this;
                var _a = this.properties, externalState = _a.externalState, id = _a.id;
                externalState.patch(lang_1.assign({ id: id }, newState))
                    .then(function () {
                    return id ? externalState.get(id) : externalState.fetch();
                })
                    .then(function (state) {
                    replaceState(_this, state);
                });
            }
        },
        initialize: function (instance) {
            instance.own(instance.on('properties:changed', function (evt) {
                onPropertiesChanged(instance, evt.properties, evt.changedPropertyKeys);
            }));
            instance.own(instance.on('state:changed', function () {
                instance.invalidate();
            }));
            stateMap.set(instance, Object.create(null));
            instance.observe();
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = externalStateFactory;
});
//# sourceMappingURL=externalState.js.map