(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/global", "@dojo/compose/compose", "@dojo/shim/Promise", "@dojo/shim/WeakMap", "maquette"], factory);
    }
})(function (require, exports) {
    "use strict";
    var global_1 = require("@dojo/core/global");
    var compose_1 = require("@dojo/compose/compose");
    var Promise_1 = require("@dojo/shim/Promise");
    var WeakMap_1 = require("@dojo/shim/WeakMap");
    var maquette_1 = require("maquette");
    /**
     * Represents the state of the projector
     */
    var ProjectorState;
    (function (ProjectorState) {
        ProjectorState[ProjectorState["Attached"] = 1] = "Attached";
        ProjectorState[ProjectorState["Detached"] = 2] = "Detached";
    })(ProjectorState = exports.ProjectorState || (exports.ProjectorState = {}));
    ;
    /**
     * Attach type for the projector
     */
    var AttachType;
    (function (AttachType) {
        AttachType[AttachType["Append"] = 1] = "Append";
        AttachType[AttachType["Merge"] = 2] = "Merge";
        AttachType[AttachType["Replace"] = 3] = "Replace";
    })(AttachType = exports.AttachType || (exports.AttachType = {}));
    ;
    /**
     * Private state map keyed by instance.
     */
    var projectorDataMap = new WeakMap_1.default();
    /**
     * Schedules a render.
     */
    function scheduleRender(event) {
        var projector = event.target;
        var projectorData = projectorDataMap.get(projector);
        if (projectorData.state === ProjectorState.Attached) {
            projector.emit({
                type: 'render:scheduled',
                target: projector
            });
            projectorData.projector.scheduleRender();
        }
    }
    function attach(instance, _a) {
        var type = _a.type;
        var projectorData = projectorDataMap.get(instance);
        var render = instance.__render__.bind(instance);
        if (projectorData.state === ProjectorState.Attached) {
            return projectorData.attachPromise || Promise_1.default.resolve({});
        }
        projectorData.state = ProjectorState.Attached;
        projectorData.attachHandle = instance.own({
            destroy: function () {
                if (projectorData.state === ProjectorState.Attached) {
                    projectorData.projector.stop();
                    projectorData.projector.detach(render);
                    projectorData.state = ProjectorState.Detached;
                }
                projectorData.attachHandle = { destroy: function () { } };
            }
        });
        projectorData.attachPromise = new Promise_1.default(function (resolve, reject) {
            projectorData.afterCreate = function () {
                instance.emit({
                    type: 'projector:attached',
                    target: instance
                });
                resolve(projectorData.attachHandle);
            };
        });
        switch (type) {
            case AttachType.Append:
                projectorData.projector.append(projectorData.root, render);
                break;
            case AttachType.Merge:
                projectorData.projector.merge(projectorData.root, render);
                break;
            case AttachType.Replace:
                projectorData.projector.replace(projectorData.root, render);
                break;
        }
        return projectorData.attachPromise;
    }
    var createProjectorMixin = compose_1.default({
        append: function () {
            var options = {
                type: AttachType.Append
            };
            return attach(this, options);
        },
        merge: function () {
            var options = {
                type: AttachType.Merge
            };
            return attach(this, options);
        },
        replace: function () {
            var options = {
                type: AttachType.Replace
            };
            return attach(this, options);
        },
        set root(root) {
            var projectorData = projectorDataMap.get(this);
            if (projectorData.state === ProjectorState.Attached) {
                throw new Error('Projector already attached, cannot change root element');
            }
            projectorData.root = root;
        },
        get root() {
            var projectorData = projectorDataMap.get(this);
            return projectorData && projectorData.root;
        },
        get projector() {
            return projectorDataMap.get(this).projector;
        },
        get projectorState() {
            var projectorData = projectorDataMap.get(this);
            return projectorData && projectorData.state;
        }
    }).mixin({
        mixin: {
            nodeAttributes: [
                function () {
                    var afterCreate = projectorDataMap.get(this).afterCreate;
                    return { afterCreate: afterCreate };
                }
            ]
        },
        aspectAdvice: {
            after: {
                __render__: function (result) {
                    if (typeof result === 'string' || result === null) {
                        throw new Error('Must provide a VNode at the root of a projector');
                    }
                    return result;
                }
            }
        }
    }).mixin({
        initialize: function (instance, options) {
            if (options === void 0) { options = {}; }
            var _a = options.root, root = _a === void 0 ? document.body : _a, _b = options.cssTransitions, cssTransitions = _b === void 0 ? false : _b;
            var maquetteProjectorOptions = {};
            if (cssTransitions) {
                if (global_1.default.cssTransitions) {
                    maquetteProjectorOptions.transitions = global_1.default.cssTransitions;
                }
                else {
                    throw new Error('Unable to create projector with css transitions enabled. Is the \'css-transition.js\' script loaded in the page?');
                }
            }
            instance.own(instance.on('widget:children', instance.invalidate));
            instance.own(instance.on('invalidated', scheduleRender));
            var projector = maquette_1.createProjector(maquetteProjectorOptions);
            projectorDataMap.set(instance, {
                projector: projector,
                root: root,
                state: ProjectorState.Detached
            });
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createProjectorMixin;
});
//# sourceMappingURL=createProjectorMixin.js.map