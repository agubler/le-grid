import { ObservablePatchableStore } from '@dojo/interfaces/abilities';
import Promise from '@dojo/shim/Promise';
import Observable from '@dojo/shim/Observable';
import { State, StatefulMixin } from '@dojo/interfaces/bases';
import { ComposeFactory } from '@dojo/compose/compose';
export declare type ExtendedObservablePatchableStore = ObservablePatchableStore<State> & {
    /**
     * A method that allows the return of an `Observable` interface for a particular `id`
     * @param id The ID to observe
     */
    observe(): Observable<State>;
    /**
     * fetch all the items
     */
    fetch(): Promise<State[]>;
};
/**
 * Properties required for the external state mixin
 */
export interface ExternalStateProperties {
    id?: string;
    externalState: ExtendedObservablePatchableStore;
}
/**
 * External State Options
 */
export interface ExternalStateOptions {
    properties: ExternalStateProperties;
}
/**
 * External State Mixin
 */
export interface ExternalStateMixin extends StatefulMixin<State> {
    /**
     * Observe the state using the id and stateFrom in the instances properties
     */
    observe(): void;
}
/**
 * External State
 */
export interface ExternalState extends ExternalStateMixin {
    readonly properties: ExternalStateProperties;
}
/**
 * Compose External State Factory interface
 */
export interface ExternalStateFactory extends ComposeFactory<ExternalStateMixin, ExternalStateOptions> {
}
/**
 * ExternalState Factory
 */
declare const externalStateFactory: ExternalStateFactory;
export default externalStateFactory;
