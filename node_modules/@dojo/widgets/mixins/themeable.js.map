{"version":3,"file":"themeable.js","sourceRoot":"","sources":["themeable.ts"],"names":[],"mappings":"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","sourcesContent":["import WeakMap from '@dojo/shim/WeakMap';\nimport { includes } from '@dojo/shim/array';\nimport { PropertiesChangeEvent } from './../interfaces';\nimport { Evented } from '@dojo/interfaces/bases';\nimport createEvented from '@dojo/compose/bases/createEvented';\nimport { ComposeFactory } from '@dojo/compose/compose';\nimport { assign } from '@dojo/core/lang';\n\n/**\n * A representation of the css-module class names\n * to be applied where each class in appliedClasses\n * is used.\n */\nexport type CSSModuleClassNames = {\n\t[key: string]: boolean;\n}\n\n/**\n * The object returned by getClasses.\n */\nexport type AppliedClasses<T> = {\n\t[P in keyof T]?: CSSModuleClassNames;\n};\n\ntype StringIndexedObject = { [key: string]: string; };\n\n/**\n * Properties required for the themeable mixin\n */\nexport interface ThemeableProperties {\n\ttheme?: {};\n\toverrideClasses?: {};\n}\n\n/**\n * Themeable Options\n */\nexport interface ThemeableOptions {\n\tproperties: ThemeableProperties;\n}\n\n/**\n * Themeable Mixin\n */\nexport interface ThemeableMixin<P> extends Evented {\n\ttheme: AppliedClasses<P>;\n}\n\n/**\n * Themeable\n */\nexport interface Themeable<P> extends ThemeableMixin<P> {\n\tbaseTheme: P;\n\tproperties: ThemeableProperties;\n}\n\n/**\n * Compose Themeable Factory interface\n */\nexport interface ThemeableFactory extends ComposeFactory<ThemeableMixin<{}>, ThemeableOptions> {}\n\n/**\n * Private map for the widgets themeClasses.\n */\nconst themeClassesMap = new WeakMap<ThemeableMixin<{}>, AppliedClasses<any>>();\n\nfunction addClassNameToCSSModuleClassNames(cssModuleClassNames: CSSModuleClassNames, classList: StringIndexedObject, className: string) {\n\tif (classList.hasOwnProperty(className)) {\n\t\t// split out the classname because css-module composition combines class names with a space\n\t\tconst generatedClassNames: string[] = classList[className].split(' ');\n\t\tgeneratedClassNames.forEach((generatedClassName) => {\n\t\t\tcssModuleClassNames[generatedClassName] = true;\n\t\t});\n\t}\n}\n\nfunction negatePreviousClasses<T>(previousClasses: AppliedClasses<T>, newClasses: AppliedClasses<T>) {\n\treturn Object.keys(previousClasses).reduce((newAppliedClasses, className: keyof T) => {\n\t\tconst oldCSSModuleClassNames = <CSSModuleClassNames> previousClasses[className];\n\n\t\tconst negatedCSSModuleClassNames = Object.keys(oldCSSModuleClassNames).reduce((newCSSModuleClassNames, oldCSSModuleClassName) => {\n\t\t\tconst currentClassNameFlag = oldCSSModuleClassNames[oldCSSModuleClassName];\n\t\t\t// If it's true it needs to be negated and passed along, If it's false,\n\t\t\t// don't return it as maquette will already have removed it.\n\t\t\tif (currentClassNameFlag) {\n\t\t\t\tnewCSSModuleClassNames[oldCSSModuleClassName] = false;\n\t\t\t}\n\t\t\treturn newCSSModuleClassNames;\n\t\t}, <CSSModuleClassNames> {});\n\n\t\tconst calculatedClassNameMap = assign({}, negatedCSSModuleClassNames, newClasses[className]);\n\t\tnewAppliedClasses[className] = calculatedClassNameMap;\n\n\t\treturn newAppliedClasses;\n\t}, <AppliedClasses<T>> {});\n}\n\nfunction generateThemeClasses<I, T>(instance: Themeable<I>, baseTheme: T, theme: {} = {}, overrideClasses: {} = {}) {\n\treturn Object.keys(baseTheme).reduce((newAppliedClasses, className: keyof T) => {\n\t\tconst newCSSModuleClassNames: CSSModuleClassNames = {};\n\t\tconst themeClassSource = theme.hasOwnProperty(className) ? theme : baseTheme;\n\n\t\taddClassNameToCSSModuleClassNames(newCSSModuleClassNames, themeClassSource, className);\n\t\toverrideClasses && addClassNameToCSSModuleClassNames(newCSSModuleClassNames, overrideClasses, className);\n\t\tnewAppliedClasses[className] = newCSSModuleClassNames;\n\n\t\treturn newAppliedClasses;\n\t}, <AppliedClasses<T>> {});\n}\n\nfunction updateThemeClassesMap<I, T>(instance: Themeable<I>, newThemeClasses: AppliedClasses<T>) {\n\tif (themeClassesMap.has(instance)) {\n\t\tconst previousThemeClasses = themeClassesMap.get(instance);\n\t\tthemeClassesMap.set(instance, negatePreviousClasses(previousThemeClasses, newThemeClasses));\n\t} else {\n\t\tthemeClassesMap.set(instance, newThemeClasses);\n\t}\n}\n\nfunction onPropertiesChanged<I>(instance: Themeable<I>, { theme, overrideClasses }: ThemeableProperties, changedPropertyKeys: string[]) {\n\tconst themeChanged = includes(changedPropertyKeys, 'theme');\n\tconst overrideClassesChanged = includes(changedPropertyKeys, 'overrideClasses');\n\n\tif (themeChanged || overrideClassesChanged) {\n\t\tconst themeClasses = generateThemeClasses(instance, instance.baseTheme, theme, overrideClasses);\n\t\tupdateThemeClassesMap(instance, themeClasses);\n\t}\n}\n\n/**\n * Themeable Factory\n */\nconst themeableFactory: ThemeableFactory = createEvented.mixin({\n\tmixin: {\n\t\tget theme(this: Themeable<any>): AppliedClasses<any> {\n\t\t\treturn themeClassesMap.get(this);\n\t\t}\n\t},\n\tinitialize<I>(instance: Themeable<I>) {\n\t\tinstance.own(instance.on('properties:changed', (evt: PropertiesChangeEvent<ThemeableMixin<I>, ThemeableProperties>) => {\n\t\t\tonPropertiesChanged(instance, evt.properties, evt.changedPropertyKeys);\n\t\t}));\n\t\tonPropertiesChanged(instance, instance.properties, [ 'theme' ]);\n\t}\n});\n\nexport default themeableFactory;\n"]}