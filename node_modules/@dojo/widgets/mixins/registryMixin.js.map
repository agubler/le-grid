{"version":3,"file":"registryMixin.js","sourceRoot":"","sources":["registryMixin.ts"],"names":[],"mappings":";;;;;;;;;;IAAA,8CAAyC;IACzC,0CAA4C;IAG5C,mEAA8D;IAuB9D,IAAM,mBAAmB,GAAG,IAAI,iBAAO,EAA6B,CAAC;IAErE,IAAM,eAAe,GAAoB,uBAAa,CAAC,KAAK,CAAC;QAC5D,SAAS,EAAE,eAAe;QAC1B,KAAK,EAAE;YACN,oBAAoB,EAApB,UAAqC,aAA8B,EAAE,KAAsB;gBAC1F,MAAM,CAAC;oBACN,OAAO,EAAE,aAAa,KAAK,KAAK;oBAChC,KAAK,EAAE,KAAK;iBACZ,CAAC;YACH,CAAC;YACD,IAAI,QAAQ;gBACX,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACtC,CAAC;SACD;QACD,UAAU,YAAC,QAAkB,EAAE,OAA6B;YAC3D,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAC,GAAkE;gBACjH,EAAE,CAAC,CAAC,gBAAQ,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;oBACnD,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC5D,CAAC;YACF,CAAC,CAAC,CAAC,CAAC;YACkB,IAAA,uCAAQ,CAAgB;YAC9C,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACd,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC7C,CAAC;QACF,CAAC;KACD,CAAC,CAAC;;IAEH,kBAAe,eAAe,CAAC","sourcesContent":["import WeakMap from '@dojo/shim/WeakMap';\nimport { includes } from '@dojo/shim/array';\nimport { PropertiesChangeEvent, PropertyChangeRecord } from './../interfaces';\nimport { Evented } from '@dojo/interfaces/bases';\nimport createEvented from '@dojo/compose/bases/createEvented';\nimport { ComposeFactory } from '@dojo/compose/compose';\nimport FactoryRegistry from '../FactoryRegistry';\n\nexport interface RegistryMixinProperties {\n\tregistry: FactoryRegistry;\n}\n\nexport interface RegistryMixinOptions {\n\tproperties: RegistryMixinProperties;\n}\n\nexport interface RegistryMixin extends Evented {\n\tdiffPropertyRegistry(previousProperty: FactoryRegistry, property: FactoryRegistry): PropertyChangeRecord;\n}\n\nexport interface RegistryFactory extends ComposeFactory<RegistryMixin, RegistryMixinOptions> {}\n\nexport interface Registry extends RegistryMixin {\n\treadonly registry: FactoryRegistry;\n\treadonly properties: RegistryMixinProperties;\n}\n\nconst internalRegistryMap = new WeakMap<Registry, FactoryRegistry>();\n\nconst registryFactory: RegistryFactory = createEvented.mixin({\n\tclassName: 'RegistryMixin',\n\tmixin: {\n\t\tdiffPropertyRegistry(this: Registry, previousValue: FactoryRegistry, value: FactoryRegistry): PropertyChangeRecord {\n\t\t\treturn {\n\t\t\t\tchanged: previousValue !== value,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t},\n\t\tget registry(this: Registry): FactoryRegistry {\n\t\t\treturn internalRegistryMap.get(this);\n\t\t}\n\t},\n\tinitialize(instance: Registry, options: RegistryMixinOptions) {\n\t\tinstance.own(instance.on('properties:changed', (evt: PropertiesChangeEvent<RegistryMixin, RegistryMixinProperties>) => {\n\t\t\tif (includes(evt.changedPropertyKeys, 'registry')) {\n\t\t\t\tinternalRegistryMap.set(instance, evt.properties.registry);\n\t\t\t}\n\t\t}));\n\t\tconst { properties: { registry } } = instance;\n\t\tif (registry) {\n\t\t\tinternalRegistryMap.set(instance, registry);\n\t\t}\n\t}\n});\n\nexport default registryFactory;\n"]}