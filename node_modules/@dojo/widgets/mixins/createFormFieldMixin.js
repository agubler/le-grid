(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/compose/bases/createStateful", "@dojo/compose/bases/createCancelableEvent", "@dojo/core/lang"], factory);
    }
})(function (require, exports) {
    "use strict";
    var createStateful_1 = require("@dojo/compose/bases/createStateful");
    var createCancelableEvent_1 = require("@dojo/compose/bases/createCancelableEvent");
    var lang_1 = require("@dojo/core/lang");
    function valueReplacer(key, value) {
        if (value instanceof RegExp) {
            return ("__RegExp(" + value.toString() + ")");
        }
        return value;
    }
    function valueReviver(key, value) {
        if (value.toString().indexOf('__RegExp(') === 0) {
            var _a = value.match(/__RegExp\(([^\)]*)\)/), regExpStr = _a[1];
            var _b = regExpStr.match(/^\/(.*?)\/([gimy]*)$/), regExp = _b[1], flags = _b[2];
            return new RegExp(regExp, flags);
        }
        return value;
    }
    /**
     * Internal function to convert a state value to a string
     * @param value The value to be converted
     */
    function valueToString(value) {
        return value
            ? Array.isArray(value) || typeof value === 'object'
                ? JSON.stringify(value, valueReplacer) : String(value)
            : value === 0
                ? '0' : value === false
                ? 'false' : '';
    }
    exports.valueToString = valueToString;
    /**
     * Internal function to convert a string to the likely more complex value stored in
     * state
     * @param str The string to convert to a state value
     */
    function stringToValue(str) {
        try {
            var value = JSON.parse(str, valueReviver);
            return value;
        }
        catch (e) {
            if (/^(\-|\+)?([0-9]+(\.[0-9]+)?|Infinity)$/.test(str)) {
                return Number(str);
            }
            if (str) {
                return str;
            }
            return undefined;
        }
    }
    exports.stringToValue = stringToValue;
    var createFormMixin = createStateful_1.default
        .mixin({
        mixin: {
            get value() {
                return valueToString(this.state.value);
            },
            set value(value) {
                if (value !== this.state.value) {
                    var event_1 = lang_1.assign(createCancelableEvent_1.default({
                        type: 'valuechange',
                        target: this
                    }), {
                        oldValue: valueToString(this.state.value),
                        value: value
                    });
                    this.emit(event_1);
                    if (!event_1.defaultPrevented) {
                        this.setState({ value: stringToValue(event_1.value) });
                    }
                }
            },
            nodeAttributes: [
                function () {
                    var _a = this, type = _a.type, value = _a.value, state = _a.state;
                    var disabled = state.disabled, name = state.name;
                    return { type: type, value: value, name: name, disabled: Boolean(disabled) };
                }
            ]
        },
        initialize: function (instance, _a) {
            var _b = _a === void 0 ? {} : _a, value = _b.value, type = _b.type;
            if (value) {
                instance.setState({ value: value });
            }
            if (type) {
                instance.type = type;
            }
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createFormMixin;
});
//# sourceMappingURL=createFormFieldMixin.js.map