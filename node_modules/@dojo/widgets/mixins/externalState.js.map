{"version":3,"file":"externalState.js","sourceRoot":"","sources":["externalState.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handle } from '@dojo/interfaces/core';\nimport { ObservablePatchableStore } from '@dojo/interfaces/abilities';\nimport WeakMap from '@dojo/shim/WeakMap';\nimport { includes } from '@dojo/shim/array';\nimport Promise from '@dojo/shim/Promise';\nimport { assign } from '@dojo/core/lang';\nimport Observable from '@dojo/shim/Observable';\nimport { PropertiesChangeEvent } from './../interfaces';\nimport { State, StatefulMixin } from '@dojo/interfaces/bases';\nimport createEvented from '@dojo/compose/bases/createEvented';\nimport { ComposeFactory } from '@dojo/compose/compose';\n\nexport type TempStore = ObservablePatchableStore<State> & {\n\t/**\n\t * A method that allows the return of an `Observable` interface for a particular `id`\n\t * @param id The ID to observe\n\t */\n\tobserve(): Observable<State>;\n\n\tfetch(): Promise<State[]>;\n}\n\n/**\n * Properties required for the external state mixin\n */\nexport interface ExternalStateProperties {\n\tid?: string;\n\texternalState: TempStore;\n}\n\n/**\n * External State Options\n */\nexport interface ExternalStateOptions {\n\tproperties: ExternalStateProperties;\n}\n\n/**\n * External State Mixin\n */\nexport interface ExternalStateMixin extends StatefulMixin<State> {\n\t/**\n\t * Observe the state using the id and stateFrom in the instances properties\n\t */\n\tobserve(): void;\n}\n\n/**\n * External State\n */\nexport interface ExternalState extends ExternalStateMixin {\n\treadonly properties: ExternalStateProperties;\n}\n\n/**\n * Compose External State Factory interface\n */\nexport interface ExternalStateFactory extends ComposeFactory<ExternalStateMixin, ExternalStateOptions> {}\n\n/**\n * internal state for the `ExternalStateMixin`\n */\ninterface InternalState {\n\tid: string;\n\thandle: Handle;\n}\n\n/**\n * Private map for external state.\n */\nconst internalStateMap = new WeakMap<ExternalStateMixin, InternalState>();\n\nconst stateMap = new WeakMap<ExternalStateMixin, { state: any }>();\n\n/**\n * state changed event type\n */\nconst stateChangedEventType = 'state:changed';\n\nfunction replaceState(instance: ExternalState, state: State) {\n\tconst internalState = stateMap.get(instance);\n\tif (internalState) {\n\t\tinternalState.state = state;\n\t\tconst eventObject = {\n\t\t\ttype: stateChangedEventType,\n\t\t\tstate,\n\t\t\ttarget: instance\n\t\t};\n\t\tinstance.emit(eventObject);\n\t}\n}\n\nfunction onPropertiesChanged(instance: ExternalState, properties: ExternalStateProperties, changedPropertyKeys: string[]) {\n\tconst internalState = internalStateMap.get(instance);\n\tif (internalState) {\n\t\tif (includes(changedPropertyKeys, 'externalState') || includes(changedPropertyKeys, 'id')) {\n\t\t\tinternalState.handle.destroy();\n\t\t}\n\t}\n\tinstance.observe();\n}\n\n/**\n * ExternalState Factory\n */\nconst externalStateFactory: ExternalStateFactory = createEvented.mixin({\n\tclassName: 'ExternalStateMixin',\n\tmixin: {\n\t\tget state(this: ExternalState) {\n\t\t\treturn stateMap.get(this).state;\n\t\t},\n\t\tobserve(this: ExternalState): void {\n\t\t\tconst internalState = internalStateMap.get(this);\n\t\t\tconst { properties: { id, externalState } } = this;\n\t\t\tif (!externalState) {\n\t\t\t\tthrow new Error('externalState are required to observe state');\n\t\t\t}\n\n\t\t\tif (internalState) {\n\t\t\t\tif (internalState.id === id) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow new Error('Unable to observe state for a different id');\n\t\t\t}\n\n\t\t\tconst observer = id ? externalState.observe(id) : externalState.observe();\n\t\t\tconst subscription = observer\n\t\t\t.subscribe(\n\t\t\t\t(state) => {\n\t\t\t\t\treplaceState(this, state);\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst handle = {\n\t\t\t\tdestroy: () => {\n\t\t\t\t\tsubscription.unsubscribe();\n\t\t\t\t\tinternalStateMap.delete(this);\n\t\t\t\t}\n\t\t\t};\n\t\t\tinternalStateMap.set(this, { id: id || 'all', handle });\n\t\t\tthis.own(handle);\n\t\t},\n\t\tsetState(this: ExternalState, newState: Partial<State>): void {\n\t\t\tconst { properties: { externalState, id } } = this;\n\t\t\texternalState.patch(assign( { id }, newState))\n\t\t\t\t.then(() => {\n\t\t\t\t\treturn id ? externalState.get(id) : externalState.fetch();\n\t\t\t\t})\n\t\t\t\t.then((state: State) => {\n\t\t\t\t\treplaceState(this, state);\n\t\t\t\t});\n\t\t}\n\t},\n\tinitialize(instance: ExternalState) {\n\t\tinstance.own(instance.on('properties:changed', (evt: PropertiesChangeEvent<ExternalStateMixin, ExternalStateProperties>) => {\n\t\t\tonPropertiesChanged(instance, evt.properties, evt.changedPropertyKeys);\n\t\t}));\n\t\tinstance.own(instance.on('state:changed', () => {\n\t\t\t(<any> instance).invalidate();\n\t\t}));\n\t\tstateMap.set(instance, Object.create(null));\n\t\tinstance.observe();\n\t}\n});\n\nexport default externalStateFactory;\n"]}