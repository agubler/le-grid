import { ComposeFactory } from '@dojo/compose/compose';
import { EventTargettedObject, EventCancelableObject, Handle } from '@dojo/interfaces/core';
import { EventedListener, Stateful, StatefulOptions } from '@dojo/interfaces/bases';
import { NodeAttributeFunction } from './../interfaces';
export interface FormFieldMixinOptions<V, S extends FormFieldMixinState<V>> extends StatefulOptions<S> {
    /**
     * The type of the form field (equates to the `type` attribute in the DOM)
     */
    type?: string;
    /**
     * The value of the form field
     */
    value?: V;
}
export interface FormFieldMixinState<V> {
    /**
     * Whether the field is currently disabled or not
     */
    disabled?: boolean;
    /**
     * The form widget's name
     */
    name?: string;
    /**
     * The current value
     */
    value?: V;
}
export interface ValueChangeEvent<V> extends EventCancelableObject<'valuechange', FormFieldMixin<V, FormFieldMixinState<V>>> {
    /**
     * The event type (in this case, `valuechange`)
     */
    type: 'valuechange';
    /**
     * The previous value before this event
     */
    oldValue: string;
    /**
     * The current value when this event fires
     */
    value: string;
}
export interface FormField<V> {
    /**
     * An array of functions that generate the node attributes on a render
     */
    nodeAttributes: NodeAttributeFunction<this>[];
    /**
     * The HTML type for this widget
     */
    type?: string;
    /**
     * The string value of this form widget, which is read from the widget state
     */
    value?: string;
}
export interface FormFieldOverride<V> {
    /**
     * Add listener for a `valuechange` event, emitted when the value on the widget changes
     */
    on(type: 'valuechange', listener: EventedListener<FormFieldMixin<V, FormFieldMixinState<V>>, ValueChangeEvent<V>>): Handle;
    on(type: string, listener: EventedListener<V, EventTargettedObject<V>>): Handle;
}
export declare type FormFieldMixin<V, S extends FormFieldMixinState<V>> = FormField<V> & Stateful<S> & FormFieldOverride<V>;
export interface FormMixinFactory extends ComposeFactory<FormFieldMixin<any, FormFieldMixinState<any>>, FormFieldMixinOptions<any, FormFieldMixinState<any>>> {
    <V>(options?: FormFieldMixinOptions<V, FormFieldMixinState<V>>): FormFieldMixin<V, FormFieldMixinState<V>>;
}
/**
 * Internal function to convert a state value to a string
 * @param value The value to be converted
 */
export declare function valueToString(value: any): string;
/**
 * Internal function to convert a string to the likely more complex value stored in
 * state
 * @param str The string to convert to a state value
 */
export declare function stringToValue(str: string): any;
declare const createFormMixin: FormMixinFactory;
export default createFormMixin;
