{"version":3,"file":"createFormFieldMixin.js","sourceRoot":"","sources":["createFormFieldMixin.ts"],"names":[],"mappings":"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","sourcesContent":["import { VNodeProperties } from '@dojo/interfaces/vdom';\nimport { ComposeFactory } from '@dojo/compose/compose';\nimport createStateful from '@dojo/compose/bases/createStateful';\nimport createCancelableEvent from '@dojo/compose/bases/createCancelableEvent';\nimport { EventTargettedObject, EventCancelableObject, Handle } from '@dojo/interfaces/core';\nimport { EventedListener, Stateful, StatefulOptions } from '@dojo/interfaces/bases';\nimport { assign } from '@dojo/core/lang';\nimport { NodeAttributeFunction } from './../interfaces';\n\nexport interface FormFieldMixinOptions<V, S extends FormFieldMixinState<V>> extends StatefulOptions<S> {\n\t/**\n\t * The type of the form field (equates to the `type` attribute in the DOM)\n\t */\n\ttype?: string;\n\n\t/**\n\t * The value of the form field\n\t */\n\tvalue?: V;\n}\n\nexport interface FormFieldMixinState<V> {\n\t/**\n\t * Whether the field is currently disabled or not\n\t */\n\tdisabled?: boolean;\n\n\t/**\n\t * The form widget's name\n\t */\n\tname?: string;\n\n\t/**\n\t * The current value\n\t */\n\tvalue?: V;\n}\n\nexport interface ValueChangeEvent<V> extends EventCancelableObject<'valuechange', FormFieldMixin<V, FormFieldMixinState<V>>> {\n\t/**\n\t * The event type (in this case, `valuechange`)\n\t */\n\ttype: 'valuechange';\n\n\t/**\n\t * The previous value before this event\n\t */\n\toldValue: string;\n\n\t/**\n\t * The current value when this event fires\n\t */\n\tvalue: string;\n}\n\nexport interface FormField<V> {\n\t/**\n\t * An array of functions that generate the node attributes on a render\n\t */\n\tnodeAttributes: NodeAttributeFunction<this>[];\n\n\t/**\n\t * The HTML type for this widget\n\t */\n\ttype?: string;\n\n\t/**\n\t * The string value of this form widget, which is read from the widget state\n\t */\n\tvalue?: string;\n}\n\nexport interface FormFieldOverride<V> {\n\t/**\n\t * Add listener for a `valuechange` event, emitted when the value on the widget changes\n\t */\n\ton(type: 'valuechange', listener: EventedListener<FormFieldMixin<V, FormFieldMixinState<V>>, ValueChangeEvent<V>>): Handle;\n\ton(type: string, listener: EventedListener<V, EventTargettedObject<V>>): Handle;\n}\n\nexport type FormFieldMixin<V, S extends FormFieldMixinState<V>> = FormField<V> & Stateful<S> & FormFieldOverride<V>;\n\nexport interface FormMixinFactory extends ComposeFactory<FormFieldMixin<any, FormFieldMixinState<any>>, FormFieldMixinOptions<any, FormFieldMixinState<any>>> {\n\t<V>(options?: FormFieldMixinOptions<V, FormFieldMixinState<V>>): FormFieldMixin<V, FormFieldMixinState<V>>;\n}\n\nfunction valueReplacer(key: string, value: any): any {\n\tif (value instanceof RegExp) {\n\t\treturn (`__RegExp(${value.toString()})`);\n\t}\n\treturn value;\n}\n\nfunction valueReviver(key: string, value: any): any {\n\tif (value.toString().indexOf('__RegExp(') === 0) {\n\t\tconst [ , regExpStr ] = value.match(/__RegExp\\(([^\\)]*)\\)/);\n\t\tconst [ , regExp, flags ] = regExpStr.match(/^\\/(.*?)\\/([gimy]*)$/);\n\t\treturn new RegExp(regExp, flags);\n\t}\n\treturn value;\n}\n\n/**\n * Internal function to convert a state value to a string\n * @param value The value to be converted\n */\nexport function valueToString(value: any): string {\n\treturn value\n\t\t? Array.isArray(value) || typeof value === 'object'\n\t\t\t? JSON.stringify(value, valueReplacer) : String(value)\n\t\t: value === 0\n\t\t\t? '0' : value === false\n\t\t\t\t? 'false' : '';\n}\n\n/**\n * Internal function to convert a string to the likely more complex value stored in\n * state\n * @param str The string to convert to a state value\n */\nexport function stringToValue(str: string): any {\n\ttry {\n\t\tconst value = JSON.parse(str, valueReviver);\n\t\treturn value;\n\t}\n\tcatch (e) {\n\t\tif (/^(\\-|\\+)?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(str)) {\n\t\t\treturn Number(str);\n\t\t}\n\t\tif (str) {\n\t\t\treturn str;\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nconst createFormMixin: FormMixinFactory = createStateful\n\t.mixin({\n\t\tmixin: <FormField<any>> {\n\t\t\tget value(this: FormFieldMixin<any, FormFieldMixinState<any>>): string {\n\t\t\t\treturn valueToString(this.state.value);\n\t\t\t},\n\n\t\t\tset value(this: FormFieldMixin<any, FormFieldMixinState<any>>, value: string) {\n\t\t\t\tif (value !== this.state.value) {\n\t\t\t\t\tconst event = assign(createCancelableEvent({\n\t\t\t\t\t\ttype: 'valuechange',\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t}), {\n\t\t\t\t\t\toldValue: valueToString(this.state.value),\n\t\t\t\t\t\tvalue\n\t\t\t\t\t});\n\t\t\t\t\tthis.emit(event);\n\t\t\t\t\tif (!event.defaultPrevented) {\n\t\t\t\t\t\tthis.setState({ value: stringToValue(event.value) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tnodeAttributes: [\n\t\t\t\tfunction (this: FormFieldMixin<any, FormFieldMixinState<any>>): VNodeProperties {\n\t\t\t\t\tconst { type, value, state } = this;\n\t\t\t\t\tconst { disabled, name } = state;\n\n\t\t\t\t\treturn { type, value, name, disabled: Boolean(disabled) };\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\tinitialize(\n\t\t\tinstance: FormFieldMixin<any, FormFieldMixinState<any>>,\n\t\t\t{ value, type }: FormFieldMixinOptions<any, FormFieldMixinState<any>> = {}\n\t\t) {\n\t\t\tif (value) {\n\t\t\t\tinstance.setState({ value });\n\t\t\t}\n\t\t\tif (type) {\n\t\t\t\tinstance.type = type;\n\t\t\t}\n\t\t}\n\t});\n\nexport default createFormMixin;\n"]}