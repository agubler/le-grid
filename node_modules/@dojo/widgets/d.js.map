{"version":3,"file":"d.js","sourceRoot":"","sources":["d.ts"],"names":[],"mappings":";;;;;;;;;;IAAA,wCAAyC;IAEzC,4CAAuC;IACvC,qCAA6B;IAS7B,qDAAgD;IAEhD;;OAEG;IACU,QAAA,KAAK,GAAG,gBAAM,CAAC,yBAAyB,CAAC,CAAC;IAEvD;;OAEG;IACU,QAAA,KAAK,GAAG,gBAAM,CAAC,yBAAyB,CAAC,CAAC;IAEvD;;OAEG;IACH,iBAAwB,KAAY;QACnC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,aAAK,CAAC,CAAC;IAC9E,CAAC;IAFD,0BAEC;IAED;;OAEG;IACH,iBAAwB,KAAY;QACnC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,aAAK,CAAC,CAAC;IAC9E,CAAC;IAFD,0BAEC;IAEY,QAAA,QAAQ,GAAG,IAAI,yBAAe,EAAE,CAAC;IAI9C,WAA8C,OAA6C,EAAE,UAAa,EAAE,QAAsB;QAAtB,yBAAA,EAAA,aAAsB;QAEjI,MAAM,CAAC;YACN,QAAQ,UAAA;YACR,OAAO,SAAA;YACP,UAAU,YAAA;YACV,IAAI,EAAE,aAAK;SACX,CAAC;IACH,CAAC;IARD,cAQC;IAKD,WAAkB,GAAW,EAAE,oBAA0C,EAAE,QAAsB;QAAlE,qCAAA,EAAA,yBAA0C;QAAE,yBAAA,EAAA,aAAsB;QAE/F,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YACzC,QAAQ,GAAG,oBAAoB,CAAC;YAChC,oBAAoB,GAAG,EAAE,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC;YACN,QAAQ,UAAA;YACR,MAAM,EAAN,UAAuC,OAA2B;gBAA3B,wBAAA,EAAA,YAA2B;gBACjE,MAAM,CAAC,YAAC,CAAC,GAAG,EAAE,aAAM,CAAC,OAAO,EAAE,oBAAoB,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrE,CAAC;YACD,IAAI,EAAE,aAAK;SACX,CAAC;IACJ,CAAC;IAdD,cAcC","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { VNode, VNodeProperties } from '@dojo/interfaces/vdom';\nimport Symbol from '@dojo/shim/Symbol';\nimport { h } from 'maquette';\nimport {\n\tDNode,\n\tHNode,\n\tWNode,\n\tWidget,\n\tWidgetProperties,\n\tWidgetFactory\n} from './interfaces';\nimport FactoryRegistry from './FactoryRegistry';\n\n/**\n * The symbol intifier for a WNode type\n */\nexport const WNODE = Symbol('Identifier for a WNode.');\n\n/**\n * The symbol intifier for a HNode type\n */\nexport const HNODE = Symbol('Identifier for a HNode.');\n\n/**\n * Helper function that returns true if the `DNode` is a `WNode` using the `type` property\n */\nexport function isWNode(child: DNode): child is WNode {\n\treturn Boolean(child && (typeof child !== 'string') && child.type === WNODE);\n}\n\n/**\n * Helper function that returns true if the `DNode` is a `Node` using the `type` property\n */\nexport function isHNode(child: DNode): child is HNode {\n\treturn Boolean(child && (typeof child !== 'string') && child.type === HNODE);\n}\n\nexport const registry = new FactoryRegistry();\n\nexport function w<P extends WidgetProperties>(factory: WidgetFactory<Widget<P>, P> | string, properties: P): WNode;\nexport function w<P extends WidgetProperties>(factory: WidgetFactory<Widget<P>, P> | string, properties: P, children?: DNode[]): WNode;\nexport function w<P extends WidgetProperties>(factory: WidgetFactory<Widget<P>, P> | string, properties: P, children: DNode[] = []): WNode {\n\n\treturn {\n\t\tchildren,\n\t\tfactory,\n\t\tproperties,\n\t\ttype: WNODE\n\t};\n}\n\nexport function v(tag: string, properties: VNodeProperties, children?: DNode[]): HNode;\nexport function v(tag: string, children: DNode[]): HNode;\nexport function v(tag: string): HNode;\nexport function v(tag: string, propertiesOrChildren: VNodeProperties = {}, children: DNode[] = []): HNode {\n\n\t\tif (Array.isArray(propertiesOrChildren)) {\n\t\t\tchildren = propertiesOrChildren;\n\t\t\tpropertiesOrChildren = {};\n\t\t}\n\n\t\treturn {\n\t\t\tchildren,\n\t\t\trender<T>(this: { children: VNode[] }, options: { bind?: T } = { }) {\n\t\t\t\treturn h(tag, assign(options, propertiesOrChildren), this.children);\n\t\t\t},\n\t\t\ttype: HNODE\n\t\t};\n}\n"]}