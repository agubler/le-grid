(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/compose/compose", "@dojo/compose/bases/createEvented", "@dojo/core/lang", "@dojo/shim/WeakMap", "@dojo/shim/Map", "./d"], factory);
    }
})(function (require, exports) {
    "use strict";
    var compose_1 = require("@dojo/compose/compose");
    var createEvented_1 = require("@dojo/compose/bases/createEvented");
    var lang_1 = require("@dojo/core/lang");
    var WeakMap_1 = require("@dojo/shim/WeakMap");
    var Map_1 = require("@dojo/shim/Map");
    var d_1 = require("./d");
    ;
    /**
     * Internal state map for widget instances
     */
    var widgetInternalStateMap = new WeakMap_1.default();
    var propertyFunctionNameRegex = /^diffProperty(.*)/;
    function getFromRegistry(instance, factoryLabel) {
        if (instance.registry && instance.registry.has(factoryLabel)) {
            return instance.registry.get(factoryLabel);
        }
        return d_1.registry.get(factoryLabel);
    }
    function dNodeToVNode(instance, dNode) {
        var internalState = widgetInternalStateMap.get(instance);
        if (typeof dNode === 'string' || dNode === null) {
            return dNode;
        }
        if (d_1.isWNode(dNode)) {
            var children = dNode.children, properties = dNode.properties;
            var id = properties.id;
            var factory = dNode.factory;
            var child = void 0;
            if (typeof factory === 'string') {
                var item = getFromRegistry(instance, factory);
                if (compose_1.isComposeFactory(item)) {
                    factory = item;
                }
                else {
                    if (item && !internalState.initializedFactoryMap.has(factory)) {
                        var promise = item.then(function (factory) {
                            instance.invalidate();
                            return factory;
                        });
                        internalState.initializedFactoryMap.set(factory, promise);
                    }
                    return null;
                }
            }
            var childrenMapKey = id || factory;
/** monkey patch start **/
            var cachedChild = internalState.historicChildrenMap.get(childrenMapKey);
            if (cachedChild && cachedChild.instance && cachedChild.factory === factory) {
                child = cachedChild.instance;
/** monkey patch end **/
                if (properties) {
                    child.setProperties(properties);
                }
            }
            else {
                child = factory({ properties: properties });
                child.own(child.on('invalidated', function () {
                    instance.invalidate();
                }));
/** monkey patch start **/
                internalState.historicChildrenMap.set(childrenMapKey, { instance: child, factory });
/** monkey patch end **/
                instance.own(child);
            }
            if (!id && internalState.currentChildrenMap.has(factory)) {
                var errorMsg = 'must provide unique keys when using the same widget factory multiple times';
                console.error(errorMsg);
                instance.emit({ type: 'error', target: instance, error: new Error(errorMsg) });
            }
            child.setChildren(children);
/** monkey patch start **/
            internalState.currentChildrenMap.set(childrenMapKey, { instance: child, factory });
/** monkey patch end **/
            return child.__render__();
        }
        dNode.children = dNode.children
            .filter(function (child) { return child !== null; })
            .map(function (child) {
            return dNodeToVNode(instance, child);
        });
        return dNode.render({ bind: instance });
    }
    function manageDetachedChildren(instance) {
        var internalState = widgetInternalStateMap.get(instance);
        internalState.historicChildrenMap.forEach(function (child, key) {
            if (!internalState.currentChildrenMap.has(key) && internalState.historicChildrenMap.has(key)) {
                internalState.historicChildrenMap.delete(key);
/** monkey patch start **/
                child.instance && child.instance.destroy();
/** monkey patch end **/
            }
        });
        internalState.currentChildrenMap.clear();
    }
    function formatTagNameAndClasses(tagName, classes) {
        if (classes.length) {
            return tagName + "." + classes.join('.');
        }
        return tagName;
    }
    var createWidget = createEvented_1.default
        .mixin({
        mixin: {
            get properties() {
                var properties = widgetInternalStateMap.get(this).properties;
                return properties;
            },
            classes: [],
            getNode: function () {
                var tag = formatTagNameAndClasses(this.tagName, this.classes);
                return d_1.v(tag, this.getNodeAttributes(), this.getChildrenNodes());
            },
            get children() {
                return widgetInternalStateMap.get(this).children;
            },
            setChildren: function (children) {
                var internalState = widgetInternalStateMap.get(this);
                internalState.children = children;
                this.emit({
                    type: 'widget:children',
                    target: this
                });
            },
            getChildrenNodes: function () {
                return this.children;
            },
            getNodeAttributes: function (overrides) {
                var _this = this;
                var props = {};
                this.nodeAttributes.forEach(function (fn) {
                    var newProps = fn.call(_this);
                    if (newProps) {
                        lang_1.assign(props, newProps);
                    }
                });
                return props;
            },
            invalidate: function () {
                var internalState = widgetInternalStateMap.get(this);
                internalState.dirty = true;
                this.emit({
                    type: 'invalidated',
                    target: this
                });
            },
            get id() {
                return this.properties['id'];
            },
            setProperties: function (properties) {
                var _this = this;
                var internalState = widgetInternalStateMap.get(this);
                var diffPropertyResults = {};
                var diffPropertyChangedKeys = [];
                internalState.diffPropertyFunctionMap.forEach(function (property, diffFunctionName) {
                    var previousProperty = internalState.previousProperties[property];
                    var newProperty = properties[property];
                    var result = _this[diffFunctionName](previousProperty, newProperty);
                    if (!result) {
                        return;
                    }
                    if (result.changed) {
                        diffPropertyChangedKeys.push(property);
                    }
                    delete properties[property];
                    delete internalState.previousProperties[property];
                    diffPropertyResults[property] = result.value;
                });
                var diffPropertiesResult = this.diffProperties(internalState.previousProperties, properties);
                internalState.properties = lang_1.assign(diffPropertiesResult.properties, diffPropertyResults);
                var changedPropertyKeys = diffPropertiesResult.changedKeys.concat(diffPropertyChangedKeys);
                if (changedPropertyKeys.length) {
                    this.emit({
                        type: 'properties:changed',
                        target: this,
                        properties: this.properties,
                        changedPropertyKeys: changedPropertyKeys
                    });
                }
                internalState.previousProperties = this.properties;
            },
            diffProperties: function (previousProperties, newProperties) {
                var changedKeys = Object.keys(newProperties).reduce(function (changedPropertyKeys, propertyKey) {
                    if (previousProperties[propertyKey] !== newProperties[propertyKey]) {
                        changedPropertyKeys.push(propertyKey);
                    }
                    return changedPropertyKeys;
                }, []);
                return { changedKeys: changedKeys, properties: lang_1.assign({}, newProperties) };
            },
            nodeAttributes: [
                function () {
                    var baseIdProp = this.properties && this.properties['id'] ? { 'data-widget-id': this.properties['id'] } : {};
                    var _a = (this.properties || {}).styles, styles = _a === void 0 ? {} : _a;
                    var classes = {};
                    var internalState = widgetInternalStateMap.get(this);
                    internalState.widgetClasses.forEach(function (c) { return classes[c] = false; });
                    if (this.properties && this.properties.classes) {
                        this.properties.classes.forEach(function (c) { return classes[c] = true; });
                        internalState.widgetClasses = this.properties.classes;
                    }
                    return lang_1.assign(baseIdProp, { key: this, classes: classes, styles: styles });
                }
            ],
            __render__: function () {
                var internalState = widgetInternalStateMap.get(this);
                if (internalState.dirty || !internalState.cachedVNode) {
                    var widget = dNodeToVNode(this, this.getNode());
                    manageDetachedChildren(this);
                    if (widget) {
                        internalState.cachedVNode = widget;
                    }
                    internalState.dirty = false;
                    return widget;
                }
                return internalState.cachedVNode;
            },
            registry: undefined,
            tagName: 'div'
        },
        initialize: function (instance, options) {
            if (options === void 0) { options = {}; }
            var tagName = options.tagName, _a = options.properties, properties = _a === void 0 ? {} : _a;
            var diffPropertyFunctionMap = new Map_1.default();
            instance.tagName = tagName || instance.tagName;
            Object.keys(Object.getPrototypeOf(instance)).forEach(function (attribute) {
                var match = attribute.match(propertyFunctionNameRegex);
                if (match) {
                    diffPropertyFunctionMap.set(match[0], "" + match[1].slice(0, 1).toLowerCase() + match[1].slice(1));
                }
            });
            widgetInternalStateMap.set(instance, {
                dirty: true,
                widgetClasses: [],
                properties: {},
                previousProperties: {},
                initializedFactoryMap: new Map_1.default(),
                historicChildrenMap: new Map_1.default(),
                currentChildrenMap: new Map_1.default(),
                diffPropertyFunctionMap: diffPropertyFunctionMap,
                children: []
            });
            instance.own(instance.on('properties:changed', function (evt) {
                instance.invalidate();
            }));
            instance.setProperties(properties);
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createWidget;
});
//# sourceMappingURL=createWidgetBase.js.map
