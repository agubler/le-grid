import { Query } from '../query/interfaces';
import Promise from '@dojo/shim/Promise';
import Map from '@dojo/shim/Map';
import { ComposeFactory } from '@dojo/compose/compose';
import { Patch, PatchMapEntry } from '../patch/createPatch';
import { StoreObservable } from './createStoreObservable';
import { Storage, FetchResult } from '../storage/createInMemoryStorage';
export declare const enum StoreOperation {
    Add = 0,
    Put = 1,
    Patch = 2,
    Delete = 3,
}
export interface StoreOptions<T, O extends CrudOptions> {
    data?: T[];
    idProperty?: string;
    idFunction?: (item: T) => string;
    storage?: Storage<T, O>;
}
export interface CrudOptions {
    rejectOverwrite?: boolean;
    id?: string;
}
export declare type CrudArgument<T> = T | string | PatchMapEntry<T, T>;
export interface UpdateResults<T> {
    currentItems?: T[];
    failedData?: CrudArgument<T>[];
    successfulData: T[] | string[];
    type: StoreOperation;
}
export declare type BasicPatch = {
    id: string;
    [index: string]: any;
};
export declare type PatchArgument<T> = Map<string, Patch<T, T>> | {
    id: string;
    patch: Patch<T, T>;
} | {
    id: string;
    patch: Patch<T, T>;
}[] | BasicPatch | BasicPatch[];
export interface Store<T, O extends CrudOptions, U extends UpdateResults<T>> {
    get(ids: string[]): Promise<T[]>;
    get(id: string): Promise<T | undefined>;
    get(ids: string | string[]): Promise<T | undefined | T[]>;
    identify(items: T[]): string[];
    identify(items: T): string;
    identify(items: T | T[]): string | string[];
    createId(): Promise<string>;
    add(items: T[] | T, options?: O): StoreObservable<T, U>;
    put(items: T[] | T, options?: O): StoreObservable<T, U>;
    patch(updates: PatchArgument<T>, options?: O): StoreObservable<T, U>;
    delete(ids: string[] | string): StoreObservable<string, U>;
    fetch(query?: Query<T>): FetchResult<T>;
}
export interface StoreFactory extends ComposeFactory<Store<{}, {}, any>, StoreOptions<{}, {}>> {
    <T extends {}, O extends CrudOptions>(options?: StoreOptions<T, O>): Store<T, O, UpdateResults<T>>;
}
declare const createStore: StoreFactory;
export default createStore;
