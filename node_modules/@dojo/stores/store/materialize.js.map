{"version":3,"file":"materialize.js","sourceRoot":"","sources":["materialize.ts"],"names":[],"mappings":";;;;;;;;;;IAiBA,qBACC,EAAmD;YAAjD,kBAAM,EAAE,kBAAM,EAAE,gBAAK;QAEvB,IAAI,aAAa,GAAG,IAAI,CAAC;QACzB,IAAM,YAAY,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAC,MAAqB;YACrE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBACxB,aAAa,GAAG,KAAK,CAAC;gBACtB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC5B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC7B,CAAC;YACF,CAAC;YACD,IAAI,CAAC,CAAC;gBACG,IAAA,kBAAI,EAAE,wBAAO,EAAE,wBAAO,CAAY;gBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC;gBACD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,CAAC;gBACD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACxB,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC;YACN,OAAO;gBACN,YAAY,CAAC,WAAW,EAAE,CAAC;YAC5B,CAAC;SACD,CAAC;IACH,CAAC;;IAjCD,8BAiCC","sourcesContent":["import { Handle } from '@dojo/core/interfaces';\nimport { MappedQueryTransformResult, QueryTransformResult, TrackableStoreDelta } from './createQueryTransformResult';\nimport { StoreDelta } from './mixins/createObservableStoreMixin';\nimport { Store } from './createStore';\n\nexport interface Materialization<I, S extends QueryTransformResult<I, any>, T extends Store<I, any, any>> {\n\tsource: S;\n\ttarget: T;\n\tapply?(target: T, update: StoreDelta<I>, source: S): void;\n}\n\nexport interface MappedMaterialization<\n\tI, S extends MappedQueryTransformResult<I, any>, T extends Store<I, any, any>\n> extends Materialization<I, S, T> {\n\tapply?(target: T, update: TrackableStoreDelta<I>, source: S): void;\n}\n\nexport default function materialize<I, S extends QueryTransformResult<I, any>, T extends Store<I, any, any>>(\n\t{ source, target, apply }: Materialization<I, S, T>\n): Handle {\n\tlet initialUpdate = true;\n\tconst subscription = source.observe().subscribe((update: StoreDelta<I>) => {\n\t\tif (apply) {\n\t\t\tapply(target, update, source);\n\t\t}\n\t\telse if (initialUpdate) {\n\t\t\tinitialUpdate = false;\n\t\t\tif (update.afterAll.length) {\n\t\t\t\ttarget.add(update.afterAll);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst { adds, updates, deletes } = update;\n\t\t\tif (adds.length) {\n\t\t\t\ttarget.add(adds);\n\t\t\t}\n\t\t\tif (updates.length) {\n\t\t\t\ttarget.put(updates);\n\t\t\t}\n\t\t\tif (deletes.length) {\n\t\t\t\ttarget.delete(deletes);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn {\n\t\tdestroy() {\n\t\t\tsubscription.unsubscribe();\n\t\t}\n\t};\n}\n"]}