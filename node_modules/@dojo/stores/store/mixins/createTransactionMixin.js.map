{"version":3,"file":"createTransactionMixin.js","sourceRoot":"","sources":["createTransactionMixin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Store, CrudOptions, UpdateResults } from '../createStore';\nimport createStoreObservable, { StoreObservable } from '../createStoreObservable';\nimport { Patch } from '../../patch/createPatch';\nimport Map from '@dojo/shim/Map';\nimport WeakMap from '@dojo/shim/WeakMap';\nimport { Observable } from '@dojo/core/Observable';\nimport compose, { ComposeFactory } from '@dojo/compose/compose';\n\nexport interface TransactionMixin<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> {\n\ttransaction(): Transaction<T, O, U, C>;\n}\n\nexport type TransactionStore<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> = TransactionMixin<T, O, U, C> & C;\n\nexport interface Transaction<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> {\n\tabort(): TransactionStore<T, O, U, C>;\n\tcommit(): StoreObservable<T | string, U[]>;\n\tadd(items: T[] | T, options?: O): Transaction<T, O, U, C>;\n\tput(items: T[] | T, options?: O): Transaction<T, O, U, C>;\n\tpatch(updates: Map<string, Patch<T, T>> | { id: string; patch: Patch<T, T> } | { id: string; patch: Patch<T, T> }[], options?: O): Transaction<T, O, U, C>;\n\tdelete(ids: string[] | string): Transaction<T, O, U, C>;\n}\n\ninterface TransactionOptions<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> {\n\tstore?: C;\n}\n\ninterface TransactionState<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> {\n\tstore: C;\n\tactions: Array<() => StoreObservable<T | string, U>>;\n}\n\nconst instanceStateMap = new WeakMap<Transaction<{}, {}, UpdateResults<{}>, Store<{}, {}, UpdateResults<{}>>>, TransactionState<{}, {}, UpdateResults<{}>, any>>();\nfunction createTransactionMixin<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>>() {\n\tconst createTransaction: ComposeFactory<Transaction<T, O, U, C>, TransactionOptions<T, O, U, C>> =\n\t\tcompose<Transaction<T, O, U, C>, TransactionOptions<T, O, U, C>>({\n\t\t\tput(this: Transaction<T, O, U, C>, items: T[] | T, options?: O) {\n\t\t\t\tconst state = instanceStateMap.get(this);\n\t\t\t\tstate.actions.push(() => {\n\t\t\t\t\treturn state.store.put(items, options);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tpatch(this: Transaction<T, O, U, C>, updates: Map<string, Patch<T, T>>, options?: O) {\n\t\t\t\tconst state = instanceStateMap.get(this);\n\t\t\t\tstate.actions.push(() => {\n\t\t\t\t\treturn state.store.patch(updates);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tadd(this: Transaction<T, O, U, C>, items: T[]| T, options?: O) {\n\t\t\t\tconst state = instanceStateMap.get(this);\n\t\t\t\tstate.actions.push(() => {\n\t\t\t\t\treturn state.store.add(items, options);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tdelete(this: Transaction<T, O, U, C>, ids: string[] | string) {\n\t\t\t\tconst state = instanceStateMap.get(this);\n\t\t\t\tstate.actions.push(() => {\n\t\t\t\t\treturn state.store.delete(ids);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tcommit(this: Transaction<T, O, U, C>) {\n\t\t\t\tconst state = instanceStateMap.get(this);\n\t\t\t\treturn createStoreObservable<T | string, U[]>(\n\t\t\t\t\tObservable.from(state.actions.map(\n\t\t\t\t\t\tfunction(action: () => StoreObservable<T | string, U>) {\n\t\t\t\t\t\t\treturn Observable.defer<U>(action);\n\t\t\t\t\t\t})).mergeAll(1).toArray(),\n\t\t\t\t\tfunction(updateResultsList) {\n\t\t\t\t\t\tconst data: (T | string)[] = [];\n\t\t\t\t\t\treturn updateResultsList.reduce(function(prev, next) {\n\t\t\t\t\t\t\treturn prev.concat(next.successfulData);\n\t\t\t\t\t\t}, data);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tabort(this: Transaction<T, O, U, C>) {\n\t\t\t\tconst state = instanceStateMap.get(this);\n\t\t\t\tstate.actions = [];\n\t\t\t\treturn state.store;\n\t\t\t}\n\n\t}, function (instance: Transaction<T, O, U, C>, options: TransactionOptions<T, O, U, C>) {\n\t\tinstanceStateMap.set(instance, {\n\t\t\tstore: options.store,\n\t\t\tactions: []\n\t\t});\n\t});\n\n\tconst transactionMixin = compose<TransactionMixin<T, O, U, C>, any>({\n\t\ttransaction(this: TransactionStore<T, O, U, C>) {\n\t\t\treturn createTransaction( {\n\t\t\t\tstore: this\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn transactionMixin;\n}\n\nexport default createTransactionMixin;\n"]}