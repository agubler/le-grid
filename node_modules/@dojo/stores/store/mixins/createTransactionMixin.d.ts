import { Store, CrudOptions, UpdateResults } from '../createStore';
import { StoreObservable } from '../createStoreObservable';
import { Patch } from '../../patch/createPatch';
import Map from '@dojo/shim/Map';
import { ComposeFactory } from '@dojo/compose/compose';
export interface TransactionMixin<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> {
    transaction(): Transaction<T, O, U, C>;
}
export declare type TransactionStore<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> = TransactionMixin<T, O, U, C> & C;
export interface Transaction<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>> {
    abort(): TransactionStore<T, O, U, C>;
    commit(): StoreObservable<T | string, U[]>;
    add(items: T[] | T, options?: O): Transaction<T, O, U, C>;
    put(items: T[] | T, options?: O): Transaction<T, O, U, C>;
    patch(updates: Map<string, Patch<T, T>> | {
        id: string;
        patch: Patch<T, T>;
    } | {
        id: string;
        patch: Patch<T, T>;
    }[], options?: O): Transaction<T, O, U, C>;
    delete(ids: string[] | string): Transaction<T, O, U, C>;
}
declare function createTransactionMixin<T, O extends CrudOptions, U extends UpdateResults<T>, C extends Store<T, O, U>>(): ComposeFactory<TransactionMixin<T, O, U, C>, any>;
export default createTransactionMixin;
