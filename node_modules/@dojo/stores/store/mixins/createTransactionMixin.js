(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../createStoreObservable", "@dojo/shim/WeakMap", "@dojo/core/Observable", "@dojo/compose/compose"], factory);
    }
})(function (require, exports) {
    "use strict";
    var createStoreObservable_1 = require("../createStoreObservable");
    var WeakMap_1 = require("@dojo/shim/WeakMap");
    var Observable_1 = require("@dojo/core/Observable");
    var compose_1 = require("@dojo/compose/compose");
    var instanceStateMap = new WeakMap_1.default();
    function createTransactionMixin() {
        var createTransaction = compose_1.default({
            put: function (items, options) {
                var state = instanceStateMap.get(this);
                state.actions.push(function () {
                    return state.store.put(items, options);
                });
                return this;
            },
            patch: function (updates, options) {
                var state = instanceStateMap.get(this);
                state.actions.push(function () {
                    return state.store.patch(updates);
                });
                return this;
            },
            add: function (items, options) {
                var state = instanceStateMap.get(this);
                state.actions.push(function () {
                    return state.store.add(items, options);
                });
                return this;
            },
            delete: function (ids) {
                var state = instanceStateMap.get(this);
                state.actions.push(function () {
                    return state.store.delete(ids);
                });
                return this;
            },
            commit: function () {
                var state = instanceStateMap.get(this);
                return createStoreObservable_1.default(Observable_1.Observable.from(state.actions.map(function (action) {
                    return Observable_1.Observable.defer(action);
                })).mergeAll(1).toArray(), function (updateResultsList) {
                    var data = [];
                    return updateResultsList.reduce(function (prev, next) {
                        return prev.concat(next.successfulData);
                    }, data);
                });
            },
            abort: function () {
                var state = instanceStateMap.get(this);
                state.actions = [];
                return state.store;
            }
        }, function (instance, options) {
            instanceStateMap.set(instance, {
                store: options.store,
                actions: []
            });
        });
        var transactionMixin = compose_1.default({
            transaction: function () {
                return createTransaction({
                    store: this
                });
            }
        });
        return transactionMixin;
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createTransactionMixin;
});
//# sourceMappingURL=createTransactionMixin.js.map