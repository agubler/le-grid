{"version":3,"file":"createStore.js","sourceRoot":"","sources":["createStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { Query } from '../query/interfaces';\nimport Promise from '@dojo/shim/Promise';\nimport WeakMap from '@dojo/shim/WeakMap';\nimport Map from '@dojo/shim/Map';\nimport { duplicate } from '@dojo/core/lang';\nimport compose, { ComposeFactory } from '@dojo/compose/compose';\nimport { Observer, Observable } from '@dojo/core/Observable';\nimport { diff, Patch, PatchMapEntry } from '../patch/createPatch';\nimport _createStoreObservable, { StoreObservable } from './createStoreObservable';\nimport createInMemoryStorage, { Storage, FetchResult } from '../storage/createInMemoryStorage';\n\nexport const enum StoreOperation {\n\tAdd,\n\tPut,\n\tPatch,\n\tDelete\n}\n\nexport interface StoreOptions<T, O extends CrudOptions> {\n\tdata?: T[];\n\tidProperty?: string;\n\tidFunction?: (item: T) => string;\n\tstorage?: Storage<T, O>;\n}\n\nexport interface CrudOptions {\n\trejectOverwrite?: boolean;\n\tid?: string;\n}\n\nexport type CrudArgument<T> = T | string | PatchMapEntry<T, T>;\n\nexport interface UpdateResults<T> {\n\tcurrentItems?: T[];\n\tfailedData?: CrudArgument<T>[];\n\tsuccessfulData: T[] | string[];\n\ttype: StoreOperation;\n}\n\nexport type BasicPatch = {\n\tid: string;\n\t[index: string]: any;\n}\n\nexport type PatchArgument<T> = Map<string, Patch<T, T>> |\n\t{ id: string; patch: Patch<T, T> } |\n\t{ id: string; patch: Patch<T, T> }[] |\n\tBasicPatch |\n\tBasicPatch[];\n\nexport interface Store<T, O extends CrudOptions, U extends UpdateResults<T>> {\n\tget(ids: string[]): Promise<T[]>;\n\tget(id: string): Promise<T | undefined>;\n\tget(ids: string | string[]): Promise<T | undefined | T[]>;\n\tidentify(items: T[]): string[];\n\tidentify(items: T): string;\n\tidentify(items: T | T[]): string | string[];\n\tcreateId(): Promise<string>;\n\tadd(items: T[] | T, options?: O): StoreObservable<T, U>;\n\tput(items: T[] | T, options?: O): StoreObservable<T, U>;\n\tpatch(updates: PatchArgument<T>, options?: O): StoreObservable<T, U>;\n\tdelete(ids: string[] | string): StoreObservable<string, U>;\n\tfetch(query?: Query<T>): FetchResult<T>;\n}\n\nexport interface StoreFactory extends ComposeFactory<Store<{}, {}, any>, StoreOptions<{}, {}>> {\n\t<T extends {}, O extends CrudOptions>(options?: StoreOptions<T, O>): Store<T, O, UpdateResults<T>>;\n}\n\ninterface BaseStoreState<T, O, U> {\n\tstorage: Storage<T, O>;\n\tinitialAddPromise: Promise<any>;\n}\n\nconst instanceStateMap = new WeakMap<Store<{}, {}, any>, BaseStoreState<{}, {}, any>>();\n\nfunction isPatchArray(patches: any[]): patches is { id: string; patch: Patch<any, any>}[] {\n\treturn isPatch(patches[0]);\n}\n\nfunction isPatch(patchObj: any): patchObj is {id: string; patch: Patch<any, any> } {\n\tconst patch = patchObj && patchObj.patch;\n\tconst id = patchObj && patchObj.id;\n\treturn typeof id === 'string' && patch && Array.isArray(patch.operations) && typeof patch.apply === 'function' &&\n\t\ttypeof patch.toString === 'function';\n}\n\nfunction createStoreObservable(storeResultsPromise: Promise<UpdateResults<{}>>) {\n\n\treturn _createStoreObservable(\n\t\tnew Observable<UpdateResults<{}>>(function subscribe(observer: Observer<UpdateResults<{}>>) {\n\t\t\tstoreResultsPromise\n\t\t\t\t.then(function(results) {\n\t\t\t\t\tobserver.next(results);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t}, function(error) {\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\t\t}),\n\t\tfunction(results: UpdateResults<{}>) {\n\t\t\treturn results.successfulData;\n\t\t}\n\t);\n}\n\nconst createStore: StoreFactory = compose<Store<{}, {}, any>, StoreOptions<{}, {}>>({\n\tget(this: Store<{}, {}, any>, ids: string[] | string): Promise<{}[] | {}> {\n\t\tconst state = instanceStateMap.get(this);\n\t\treturn state.initialAddPromise.then(function() {\n\t\t\tif (Array.isArray(ids)) {\n\t\t\t\treturn state.storage.get(ids).then((items) => items.filter((item) => Boolean(item)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn state.storage.get([ids]).then(items => items[0]);\n\t\t\t}\n\t\t});\n\t},\n\n\tadd(this: Store<{}, {}, any>, items: {}[] | {}, options?: CrudOptions) {\n\t\tconst self = this;\n\t\tconst state = instanceStateMap.get(self);\n\t\tconst storeResultsPromise = state.initialAddPromise.then(function() {\n\t\t\treturn state.storage.add(Array.isArray(items) ? items : [ items ], options);\n\t\t});\n\t\treturn createStoreObservable(storeResultsPromise);\n\t},\n\n\tput(this: Store<{}, {}, any>, items: {}[] | {}, options?: CrudOptions) {\n\t\tconst self = this;\n\t\tconst state = instanceStateMap.get(self);\n\t\tconst storeResultsPromise = state.initialAddPromise.then(function() {\n\t\t\treturn state.storage.put(Array.isArray(items) ? items : [ items ], options);\n\t\t});\n\n\t\treturn createStoreObservable(storeResultsPromise);\n\t},\n\n\tpatch(this: Store<{}, {}, any>, updates: PatchArgument<{}>, options?: CrudOptions) {\n\t\tconst self = this;\n\t\tconst state = instanceStateMap.get(self);\n\t\tlet patchEntries: PatchMapEntry<{}, {}>[] = [];\n\t\tif (Array.isArray(updates)) {\n\t\t\tif (isPatchArray(updates)) {\n\t\t\t\tpatchEntries = updates;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpatchEntries = self.identify(updates).map((id, index) => {\n\t\t\t\t\treturn { id: id, patch: diff(updates[index])};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse if (updates instanceof Map) {\n\t\t\tupdates.forEach(function(value, key) {\n\t\t\t\tpatchEntries.push({\n\t\t\t\t\tid: key,\n\t\t\t\t\tpatch: value\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\telse if (isPatch(updates)) {\n\t\t\tpatchEntries = [ updates ];\n\t\t}\n\t\telse {\n\t\t\tconst dupe = duplicate(updates);\n\t\t\tconst idInOptions = (options && options.id);\n\t\t\tconst id = idInOptions || dupe.id;\n\t\t\tif (!idInOptions) {\n\t\t\t\tdelete dupe.id;\n\t\t\t}\n\t\t\tpatchEntries = [ { id: id, patch: diff(dupe) }];\n\t\t}\n\n\t\tconst storeResultsPromise = state.initialAddPromise.then(function() {\n\t\t\treturn state.storage.patch(patchEntries);\n\t\t});\n\n\t\treturn createStoreObservable(storeResultsPromise);\n\t},\n\n\tdelete(this: Store<{}, {}, any>, ids: string | string[]) {\n\t\tconst self = this;\n\t\tconst state = instanceStateMap.get(self);\n\t\tconst storeResultsPromise = state.initialAddPromise.then(function() {\n\t\t\treturn state.storage.delete(Array.isArray(ids) ? ids : [ ids ]);\n\t\t});\n\n\t\treturn createStoreObservable(storeResultsPromise);\n\t},\n\n\tfetch(this: Store<{}, {}, any>, query?: Query<{}>) {\n\t\tconst state = instanceStateMap.get(this);\n\t\tlet resolveTotalLength: (totalLength: number) => void;\n\t\tlet rejectTotalLength: (error: any) => void;\n\t\tconst totalLength = new Promise((resolve, reject) => {\n\t\t\tresolveTotalLength = resolve;\n\t\t\trejectTotalLength = reject;\n\t\t});\n\t\tconst fetchResult: FetchResult<{}> = <any> state.initialAddPromise.then(function() {\n\t\t\tconst result = state.storage.fetch(query);\n\t\t\tresult.totalLength.then(resolveTotalLength, rejectTotalLength);\n\t\t\treturn result;\n\t\t});\n\t\tfetchResult.totalLength = fetchResult.dataLength = totalLength;\n\n\t\treturn fetchResult;\n\t},\n\n\tidentify(this: Store<{}, {}, any>, items: {}[] | {}): any {\n\t\tconst storage = instanceStateMap.get(this).storage;\n\t\tif (Array.isArray(items)) {\n\t\t\treturn storage.identify(items);\n\t\t}\n\t\telse {\n\t\t\treturn storage.identify([items])[0];\n\t\t}\n\t},\n\n\tcreateId(this: Store<{}, {}, any>) {\n\t\treturn instanceStateMap.get(this).storage.createId();\n\t}\n}, <T, O extends CrudOptions>(instance: Store<T, O, UpdateResults<T>>, options: StoreOptions<T, O>) => {\n\toptions = options || {};\n\tconst data: T[] | undefined = options.data;\n\toptions.data = undefined;\n\tconst instanceState: BaseStoreState<T, O, UpdateResults<T>> = {\n\t\tstorage: options.storage || createInMemoryStorage(options),\n\t\tinitialAddPromise: Promise.resolve()\n\t};\n\tinstanceStateMap.set(instance, instanceState);\n\tif (data) {\n\t\tinstanceState.initialAddPromise = instance.add(data).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t}\n\n});\n\nexport default createStore;\n"]}