(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/Promise", "@dojo/core/global"], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require("@dojo/shim/Promise");
    var global_1 = require("@dojo/core/global");
    global_1.default.Rx = { config: { Promise: Promise_1.default } };
    function createStoreObservable(observable, transform) {
        // Cast to any because the signatures of catch between the Observable and Promise interfaces are not
        // compatible
        var storeObservable = observable;
        storeObservable.then = function (onFulfilled, onRejected) {
            // Wrap in a shim promise because the interface that leaks through observable.toPromise is missing some
            // properties on the shim(e.g. promise)
            return Promise_1.default.resolve(observable.toPromise())
                .then(transform)
                .then(onFulfilled, onRejected);
        };
        storeObservable.catch = function (onRejected) {
            return observable.toPromise().then(transform).then(undefined, onRejected);
        };
        return storeObservable;
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createStoreObservable;
});
//# sourceMappingURL=createStoreObservable.js.map