(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/Promise", "@dojo/shim/WeakMap", "@dojo/shim/Map", "@dojo/core/lang", "@dojo/compose/compose", "@dojo/core/Observable", "../patch/createPatch", "./createStoreObservable", "../storage/createInMemoryStorage"], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require("@dojo/shim/Promise");
    var WeakMap_1 = require("@dojo/shim/WeakMap");
    var Map_1 = require("@dojo/shim/Map");
    var lang_1 = require("@dojo/core/lang");
    var compose_1 = require("@dojo/compose/compose");
    var Observable_1 = require("@dojo/core/Observable");
    var createPatch_1 = require("../patch/createPatch");
    var createStoreObservable_1 = require("./createStoreObservable");
    var createInMemoryStorage_1 = require("../storage/createInMemoryStorage");
    var instanceStateMap = new WeakMap_1.default();
    function isPatchArray(patches) {
        return isPatch(patches[0]);
    }
    function isPatch(patchObj) {
        var patch = patchObj && patchObj.patch;
        var id = patchObj && patchObj.id;
        return typeof id === 'string' && patch && Array.isArray(patch.operations) && typeof patch.apply === 'function' &&
            typeof patch.toString === 'function';
    }
    function createStoreObservable(storeResultsPromise) {
        return createStoreObservable_1.default(new Observable_1.Observable(function subscribe(observer) {
            storeResultsPromise
                .then(function (results) {
                observer.next(results);
                observer.complete();
            }, function (error) {
                observer.error(error);
            });
        }), function (results) {
            return results.successfulData;
        });
    }
    var createStore = compose_1.default({
        get: function (ids) {
            var state = instanceStateMap.get(this);
            return state.initialAddPromise.then(function () {
                if (Array.isArray(ids)) {
                    return state.storage.get(ids).then(function (items) { return items.filter(function (item) { return Boolean(item); }); });
                }
                else {
                    return state.storage.get([ids]).then(function (items) { return items[0]; });
                }
            });
        },
        add: function (items, options) {
            var self = this;
            var state = instanceStateMap.get(self);
            var storeResultsPromise = state.initialAddPromise.then(function () {
                return state.storage.add(Array.isArray(items) ? items : [items], options);
            });
            return createStoreObservable(storeResultsPromise);
        },
        put: function (items, options) {
            var self = this;
            var state = instanceStateMap.get(self);
            var storeResultsPromise = state.initialAddPromise.then(function () {
                return state.storage.put(Array.isArray(items) ? items : [items], options);
            });
            return createStoreObservable(storeResultsPromise);
        },
        patch: function (updates, options) {
            var self = this;
            var state = instanceStateMap.get(self);
            var patchEntries = [];
            if (Array.isArray(updates)) {
                if (isPatchArray(updates)) {
                    patchEntries = updates;
                }
                else {
                    patchEntries = self.identify(updates).map(function (id, index) {
                        return { id: id, patch: createPatch_1.diff(updates[index]) };
                    });
                }
            }
            else if (updates instanceof Map_1.default) {
                updates.forEach(function (value, key) {
                    patchEntries.push({
                        id: key,
                        patch: value
                    });
                });
            }
            else if (isPatch(updates)) {
                patchEntries = [updates];
            }
            else {
                var dupe = lang_1.duplicate(updates);
                var idInOptions = (options && options.id);
                var id = idInOptions || dupe.id;
                if (!idInOptions) {
                    delete dupe.id;
                }
                patchEntries = [{ id: id, patch: createPatch_1.diff(dupe) }];
            }
            var storeResultsPromise = state.initialAddPromise.then(function () {
                return state.storage.patch(patchEntries);
            });
            return createStoreObservable(storeResultsPromise);
        },
        delete: function (ids) {
            var self = this;
            var state = instanceStateMap.get(self);
            var storeResultsPromise = state.initialAddPromise.then(function () {
                return state.storage.delete(Array.isArray(ids) ? ids : [ids]);
            });
            return createStoreObservable(storeResultsPromise);
        },
        fetch: function (query) {
            var state = instanceStateMap.get(this);
            var resolveTotalLength;
            var rejectTotalLength;
            var totalLength = new Promise_1.default(function (resolve, reject) {
                resolveTotalLength = resolve;
                rejectTotalLength = reject;
            });
            var fetchResult = state.initialAddPromise.then(function () {
                var result = state.storage.fetch(query);
                result.totalLength.then(resolveTotalLength, rejectTotalLength);
                return result;
            });
            fetchResult.totalLength = fetchResult.dataLength = totalLength;
            return fetchResult;
        },
        identify: function (items) {
            var storage = instanceStateMap.get(this).storage;
            if (Array.isArray(items)) {
                return storage.identify(items);
            }
            else {
                return storage.identify([items])[0];
            }
        },
        createId: function () {
            return instanceStateMap.get(this).storage.createId();
        }
    }, function (instance, options) {
        options = options || {};
        var data = options.data;
        options.data = undefined;
        var instanceState = {
            storage: options.storage || createInMemoryStorage_1.default(options),
            initialAddPromise: Promise_1.default.resolve()
        };
        instanceStateMap.set(instance, instanceState);
        if (data) {
            instanceState.initialAddPromise = instance.add(data).catch(function (error) {
                console.error(error);
            });
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createStore;
});
//# sourceMappingURL=createStore.js.map