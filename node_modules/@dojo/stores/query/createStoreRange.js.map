{"version":3,"file":"createStoreRange.js","sourceRoot":"","sources":["createStoreRange.ts"],"names":[],"mappings":";;;;;;;;;;IAMA,wBAAwB,KAAsB;QAC7C,MAAM,CAAC,WAAS,KAAK,CAAC,KAAK,IAAG,KAAK,CAAC,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC,KAAK,GAAG,EAAE,OAAG,CAAC;IACvE,CAAC;IAED,qBAAwB,KAAa,EAAE,KAAa,EAAE,UAA6C;QAClG,MAAM,CAAC;YACN,KAAK,YAAC,IAAS;gBACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,CAAC;YACzC,CAAC;YACD,SAAS,EAAE,aAAe;YAC1B,QAAQ,YAAsB,eAAoF;gBACjH,MAAM,CAAC,CAAC,eAAe,IAAI,UAAU,IAAI,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC;YAChE,CAAC;YACD,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,KAAK;YACZ,WAAW,EAAE,KAAK;SAClB,CAAC;IACH,CAAC;;IAED,kBAAe,WAAW,CAAC","sourcesContent":["import { Query, QueryType } from './interfaces';\nexport interface StoreRange<T> extends Query<T> {\n\treadonly start: number;\n\treadonly count: number;\n}\n\nfunction serializeRange(range: StoreRange<any>): string {\n\treturn `limit(${range.count}${range.start ? ',' + range.start : ''})`;\n}\n\nfunction createRange<T>(start: number, count: number, serializer?: (range: StoreRange<T>) => string): StoreRange<T> {\n\treturn {\n\t\tapply(data: T[]) {\n\t\t\treturn data.slice(start, start + count);\n\t\t},\n\t\tqueryType: QueryType.Range,\n\t\ttoString(this: StoreRange<T>, rangeSerializer?: ((query: Query<T>) => string) | ((range: StoreRange<T>) => string) ) {\n\t\t\treturn (rangeSerializer || serializer || serializeRange)(this);\n\t\t},\n\t\tstart: start,\n\t\tcount: count,\n\t\tincremental: false\n\t};\n}\n\nexport default createRange;\n"]}