(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/WeakMap", "@dojo/compose/compose"], factory);
    }
})(function (require, exports) {
    "use strict";
    var WeakMap_1 = require("@dojo/shim/WeakMap");
    var compose_1 = require("@dojo/compose/compose");
    function isCompoundQuery(query) {
        return Boolean(query && query.queryType === 3 /* Compound */);
    }
    exports.isCompoundQuery = isCompoundQuery;
    var instanceStateMap = new WeakMap_1.default();
    var UnitQuery = {
        queryType: 0 /* Filter */,
        apply: function (data) {
            return data;
        },
        incremental: true,
        toString: function () {
            return '';
        }
    };
    var createCompoundQuery = compose_1.default({
        queryType: 3 /* Compound */,
        apply: function (data) {
            var state = instanceStateMap.get(this);
            return state.finalQuery.apply(state.queries.reduce(function (prev, next) {
                return next.apply(prev);
            }, data));
        },
        withQuery: function (query) {
            var state = instanceStateMap.get(this);
            if (state.finalQuery === UnitQuery) {
                return createCompoundQuery({
                    query: query,
                    queryStringBuilder: state.queryStringBuilder
                });
            }
            else {
                var newQuery = createCompoundQuery({
                    query: query,
                    queryStringBuilder: state.queryStringBuilder
                });
                var newQueryState = instanceStateMap.get(newQuery);
                newQueryState.queries = this.queries.concat(newQueryState.queries);
                return newQuery;
            }
        },
        toString: function (querySerializer) {
            var state = instanceStateMap.get(this);
            if (state.finalQuery === UnitQuery) {
                return state.finalQuery.toString();
            }
            return (querySerializer || state.queryStringBuilder)(this);
        },
        get incremental() {
            var state = instanceStateMap.get(this);
            return state.queries.concat([state.finalQuery]).every(function (query) {
                return Boolean(query.incremental);
            });
        },
        get queries() {
            var state = instanceStateMap.get(this);
            return state.queries.concat([state.finalQuery]);
        }
    }, function (instance, options) {
        options = options || {};
        var query = options.query || UnitQuery;
        var queries = isCompoundQuery(query) ? query.queries : [];
        if (queries.length) {
            query = queries.pop();
        }
        instanceStateMap.set(instance, {
            finalQuery: query,
            queries: queries,
            queryStringBuilder: options.queryStringBuilder || function (query) {
                var state = instanceStateMap.get(query);
                return state.queries.concat([state.finalQuery]).join('&');
            }
        });
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createCompoundQuery;
});
//# sourceMappingURL=createCompoundQuery.js.map