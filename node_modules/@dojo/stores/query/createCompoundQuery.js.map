{"version":3,"file":"createCompoundQuery.js","sourceRoot":"","sources":["createCompoundQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import WeakMap from '@dojo/shim/WeakMap';\nimport compose, { ComposeFactory } from '@dojo/compose/compose';\nimport { Query, QueryType } from './interfaces';\n\nexport interface CompoundQuery<T> extends Query<T> {\n\twithQuery(query: Query<T>): CompoundQuery<T>;\n\tqueries: Query<T>[];\n}\n\nexport interface QueryOptions<T> {\n\tquery?: Query<T>;\n\tqueryStringBuilder?: (query: CompoundQuery<T>) => string;\n}\n\ninterface QueryState<T> {\n\tqueries: Query<T>[];\n\tfinalQuery: Query<T>;\n\tqueryStringBuilder: (query: CompoundQuery<T>) => string;\n}\n\nexport function isCompoundQuery(query?: Query<any>): query is CompoundQuery<any> {\n\treturn Boolean(query && query.queryType === QueryType.Compound);\n}\n\nconst instanceStateMap = new WeakMap<Query<{}>, QueryState<{}>>();\n\nexport interface QueryFactory extends ComposeFactory<CompoundQuery<{}>, QueryOptions<{}>> {\n\t<T extends {}>(options?: QueryOptions<T>): CompoundQuery<T>;\n}\n\nconst UnitQuery = {\n\tqueryType: QueryType.Filter,\n\tapply(data: any[]) {\n\t\treturn data;\n\t},\n\tincremental: true,\n\ttoString() {\n\t\treturn '';\n\t}\n};\n\nconst createCompoundQuery: QueryFactory = compose<CompoundQuery<{}>, QueryOptions<{}>>({\n\tqueryType: QueryType.Compound,\n\n\tapply(this: Query<{}>, data: {}[]): {}[] {\n\t\tconst state = instanceStateMap.get(this);\n\t\treturn state.finalQuery.apply(state.queries.reduce(function(prev, next) {\n\t\t\treturn next.apply(prev);\n\t\t}, data));\n\t},\n\n\twithQuery(this: CompoundQuery<{}>, query: Query<{}>): CompoundQuery<{}> {\n\t\tconst state = instanceStateMap.get(this);\n\t\tif (state.finalQuery === UnitQuery) {\n\t\t\treturn createCompoundQuery({\n\t\t\t\tquery: query,\n\t\t\t\tqueryStringBuilder: state.queryStringBuilder\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconst newQuery = createCompoundQuery({\n\t\t\t\tquery: query,\n\t\t\t\tqueryStringBuilder: state.queryStringBuilder\n\t\t\t});\n\n\t\t\tconst newQueryState = instanceStateMap.get(newQuery);\n\t\t\tnewQueryState.queries = [ ...this.queries, ...newQueryState.queries ];\n\n\t\t\treturn newQuery;\n\t\t}\n\t},\n\n\ttoString(this: Query<{}>, querySerializer?: ((query: Query<{}>) => string) | ((query: CompoundQuery<{}>) => string)): string {\n\t\tconst state = instanceStateMap.get(this);\n\t\tif (state.finalQuery === UnitQuery) {\n\t\t\treturn state.finalQuery.toString();\n\t\t}\n\t\treturn (querySerializer || state.queryStringBuilder)(this);\n\t},\n\n\tget incremental(this: Query<{}>) {\n\t\tconst state = instanceStateMap.get(this);\n\t\treturn [ ...state.queries, state.finalQuery ].every(function(query: Query<any>) {\n\t\t\treturn Boolean(query.incremental);\n\t\t});\n\t},\n\n\tget queries(this: Query<{}>) {\n\t\tconst state = instanceStateMap.get(this);\n\t\treturn [ ...state.queries, state.finalQuery ];\n\t}\n}, function<T>(instance: Query<T>, options?: QueryOptions<T>) {\n\toptions = options || {};\n\tlet query = options.query || UnitQuery;\n\tconst queries = isCompoundQuery(query) ? query.queries : [];\n\tif (queries.length) {\n\t\tquery = queries.pop()!;\n\t}\n\tinstanceStateMap.set(instance, {\n\t\tfinalQuery: query,\n\t\tqueries: queries,\n\t\tqueryStringBuilder: options.queryStringBuilder || function(query) {\n\t\t\tconst state = instanceStateMap.get(query);\n\t\t\treturn [ ...state.queries, state.finalQuery ].join('&');\n\t\t}\n\t});\n});\n\nexport default createCompoundQuery;\n"]}