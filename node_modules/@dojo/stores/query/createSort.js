(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../patch/createJsonPointer"], factory);
    }
})(function (require, exports) {
    "use strict";
    var createJsonPointer_1 = require("../patch/createJsonPointer");
    function isDescending(descending, index) {
        if (!descending) {
            return false;
        }
        else if (typeof descending[index] !== 'undefined') {
            return descending[index];
        }
        else {
            return descending[0];
        }
    }
    function createSort(comparatorOrProperty, descending, serializer) {
        var anyAreFunction = false;
        var sortParameterArray = Array.isArray(comparatorOrProperty) ? comparatorOrProperty : [comparatorOrProperty];
        var descendingArray = descending ?
            (Array.isArray(descending) ? descending : [descending]) : undefined;
        var comparators = sortParameterArray.map(function (comparatorOrProperty, index) {
            var isFunction = typeof comparatorOrProperty === 'function';
            var descending = isDescending(descendingArray, index);
            var comparator;
            if (isFunction) {
                anyAreFunction = true;
                comparator = comparatorOrProperty;
            }
            else {
                var pointer_1;
                if (typeof comparatorOrProperty === 'string') {
                    comparator = function (a, b) {
                        return sortValue(a[comparatorOrProperty], b[comparatorOrProperty], Boolean(descending));
                    };
                }
                else {
                    pointer_1 = comparatorOrProperty;
                    comparator = function (a, b) {
                        return sortValue(createJsonPointer_1.navigate(pointer_1, a), createJsonPointer_1.navigate(pointer_1, b), Boolean(descending));
                    };
                }
            }
            if (descending && isFunction) {
                comparator = flip(comparator);
            }
            return comparator;
        });
        var comparator = comparators.length > 1 ? function (a, b) { return comparators.reduce(function (prev, next) { return prev || next(a, b); }, 0); } : comparators[0];
        return {
            apply: function (data) {
                return data.sort(comparator);
            },
            sortParameters: sortParameterArray,
            descending: descendingArray,
            queryType: 1 /* Sort */,
            toString: function (sortSerializer) {
                if (anyAreFunction) {
                    throw Error('Cannot parse this sort type to an RQL query string');
                }
                return (sortSerializer || serializer || serialize)(this);
            },
            incremental: true
        };
    }
    function flip(comparator) {
        return function (a, b) {
            return -1 * comparator(a, b);
        };
    }
    function serialize(sort) {
        return 'sort(' + sort.sortParameters.map(function (param, index) {
            var descending = isDescending(sort.descending, index);
            return (descending ? '-' : '+') + param;
        }).join(',') + ')';
    }
    // the `a == null` check returns `true` when a is `null` or `undefined`.
    function sortValue(a, b, descending) {
        var comparison;
        a != null && (a = a.valueOf());
        b != null && (b = b.valueOf());
        if (a === b) {
            comparison = 0;
        }
        else {
            // undefined < null < defined
            var isALessThanB = typeof a === 'undefined' ||
                a === null && typeof b !== 'undefined' ||
                b != null && a < b;
            comparison = descending === isALessThanB ? 1 : -1;
        }
        return comparison;
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createSort;
});
//# sourceMappingURL=createSort.js.map