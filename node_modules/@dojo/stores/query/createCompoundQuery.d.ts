import { ComposeFactory } from '@dojo/compose/compose';
import { Query } from './interfaces';
export interface CompoundQuery<T> extends Query<T> {
    withQuery(query: Query<T>): CompoundQuery<T>;
    queries: Query<T>[];
}
export interface QueryOptions<T> {
    query?: Query<T>;
    queryStringBuilder?: (query: CompoundQuery<T>) => string;
}
export declare function isCompoundQuery(query?: Query<any>): query is CompoundQuery<any>;
export interface QueryFactory extends ComposeFactory<CompoundQuery<{}>, QueryOptions<{}>> {
    <T extends {}>(options?: QueryOptions<T>): CompoundQuery<T>;
}
declare const createCompoundQuery: QueryFactory;
export default createCompoundQuery;
