{"version":3,"file":"createSort.js","sourceRoot":"","sources":["createSort.ts"],"names":[],"mappings":";;;;;;;;;;IACA,gEAAmE;IAQnE,sBAAsB,UAAiC,EAAE,KAAa;QACrE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC;IACF,CAAC;IAED,oBACC,oBAA2D,EAC3D,UAAgC,EAChC,UAAsC;QAEtC,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,IAAM,kBAAkB,GAAuB,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,oBAAoB,GAAG,CAAE,oBAAoB,CAAE,CAAC;QACrI,IAAM,eAAe,GAA0B,UAAU;YACxD,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,UAAU,GAAG,CAAE,UAAU,CAAE,CAAC,GAAG,SAAS,CAAC;QACvE,IAAM,WAAW,GAA+B,kBAAkB,CAAC,GAAG,CAAC,UAAC,oBAAoB,EAAE,KAAK;YAClG,IAAM,UAAU,GAAG,OAAO,oBAAoB,KAAK,UAAU,CAAC;YAC9D,IAAM,UAAU,GAAG,YAAY,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACxD,IAAI,UAAkC,CAAC;YACvC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChB,cAAc,GAAG,IAAI,CAAC;gBACtB,UAAU,GAAS,oBAAoB,CAAC;YACzC,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,IAAI,SAAoB,CAAC;gBACzB,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC9C,UAAU,GAAG,UAAC,CAAI,EAAE,CAAI;wBACvB,MAAM,CAAC,SAAS,CAAQ,CAAE,CAAC,oBAAoB,CAAC,EAAS,CAAE,CAAC,oBAAoB,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;oBACzG,CAAC,CAAC;gBACH,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,SAAO,GAAiB,oBAAoB,CAAC;oBAC7C,UAAU,GAAG,UAAS,CAAI,EAAE,CAAI;wBAC/B,MAAM,CAAC,SAAS,CAAC,4BAAQ,CAAC,SAAO,EAAE,CAAC,CAAC,EAAE,4BAAQ,CAAC,SAAO,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;oBACnF,CAAC,CAAC;gBACH,CAAC;YACF,CAAC;YAED,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC;gBAC9B,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/B,CAAC;YAED,MAAM,CAAC,UAAU,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAM,UAAU,GACf,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,UAAC,CAAI,EAAE,CAAI,IAAK,OAAA,WAAW,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,OAAA,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAlB,CAAkB,EAAE,CAAC,CAAC,EAAzD,CAAyD,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QACrH,MAAM,CAAC;YACN,KAAK,YAAC,IAAS;gBACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,CAAC;YACD,cAAc,EAAE,kBAAkB;YAClC,UAAU,EAAE,eAAe;YAC3B,SAAS,EAAE,YAAc;YACzB,QAAQ,YAAgB,cAA2C;gBAClE,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACpB,MAAM,KAAK,CAAC,oDAAoD,CAAC,CAAC;gBACnE,CAAC;gBACD,MAAM,CAAC,CAAC,cAAc,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;YAC1D,CAAC;YACD,WAAW,EAAE,IAAI;SACjB,CAAC;IACH,CAAC;IAED,cAAiB,UAAkC;QAClD,MAAM,CAAC,UAAS,CAAI,EAAE,CAAI;YACzB,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC;IACH,CAAC;IAED,mBAAmB,IAAe;QACjC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK;YACrD,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,CAAC,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;QACzC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAI,GAAG,CAAC;IACrB,CAAC;IACD,wEAAwE;IACxE,mBAAmB,CAAM,EAAE,CAAM,EAAE,UAAmB;QACrD,IAAI,UAAkB,CAAC;QACvB,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/B,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACb,UAAU,GAAG,CAAC,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,CAAC;YACL,6BAA6B;YAC7B,IAAM,YAAY,GAAG,OAAO,CAAC,KAAK,WAAW;gBAC5C,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,WAAW;gBACtC,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;YACpB,UAAU,GAAG,UAAU,KAAK,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,CAAC,UAAU,CAAC;IACnB,CAAC;;IAED,kBAAe,UAAU,CAAC","sourcesContent":["import { Query, QueryType } from './interfaces';\nimport { JsonPointer, navigate } from '../patch/createJsonPointer';\n\nexport type SortParameter<T> = ((a: T, b: T) => number) | string | JsonPointer;\nexport interface Sort<T> extends Query<T> {\n\treadonly sortParameters: SortParameter<T>[];\n\treadonly descending?: boolean[];\n}\n\nfunction isDescending(descending: boolean[] | undefined, index: number) {\n\tif (!descending) {\n\t\treturn false;\n\t}\n\telse if (typeof descending[index] !== 'undefined') {\n\t\treturn descending[index];\n\t}\n\telse {\n\t\treturn descending[0];\n\t}\n}\n\nfunction createSort<T>(\n\tcomparatorOrProperty: SortParameter<T> | SortParameter<T>[],\n\tdescending?: boolean | boolean[],\n\tserializer?: (sort: Sort<T>) => string): Sort<T> {\n\n\tlet anyAreFunction = false;\n\tconst sortParameterArray: SortParameter<T>[] = Array.isArray(comparatorOrProperty) ? comparatorOrProperty : [ comparatorOrProperty ];\n\tconst descendingArray: boolean[] | undefined = descending ?\n\t\t(Array.isArray(descending) ? descending : [ descending ]) : undefined;\n\tconst comparators: ((a: T, b: T) => number)[] = sortParameterArray.map((comparatorOrProperty, index) => {\n\t\tconst isFunction = typeof comparatorOrProperty === 'function';\n\t\tconst descending = isDescending(descendingArray, index);\n\t\tlet comparator: (a: T, b: T) => number;\n\t\tif (isFunction) {\n\t\t\tanyAreFunction = true;\n\t\t\tcomparator = <any> comparatorOrProperty;\n\t\t}\n\t\telse {\n\t\t\tlet pointer: JsonPointer;\n\t\t\tif (typeof comparatorOrProperty === 'string') {\n\t\t\t\tcomparator = (a: T, b: T) => {\n\t\t\t\t\treturn sortValue((<any> a)[comparatorOrProperty], (<any> b)[comparatorOrProperty], Boolean(descending));\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpointer = <JsonPointer> comparatorOrProperty;\n\t\t\t\tcomparator = function(a: T, b: T) {\n\t\t\t\t\treturn sortValue(navigate(pointer, a), navigate(pointer, b), Boolean(descending));\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (descending && isFunction) {\n\t\t\tcomparator = flip(comparator);\n\t\t}\n\n\t\treturn comparator;\n\t});\n\tconst comparator =\n\t\tcomparators.length > 1 ? (a: T, b: T) => comparators.reduce((prev, next) => prev || next(a, b), 0) : comparators[0];\n\treturn {\n\t\tapply(data: T[]) {\n\t\t\treturn data.sort(comparator);\n\t\t},\n\t\tsortParameters: sortParameterArray,\n\t\tdescending: descendingArray,\n\t\tqueryType: QueryType.Sort,\n\t\ttoString(this: Sort<T>, sortSerializer: ((sort: Sort<T>) => string)) {\n\t\t\tif (anyAreFunction) {\n\t\t\t\tthrow Error('Cannot parse this sort type to an RQL query string');\n\t\t\t}\n\t\t\treturn (sortSerializer || serializer || serialize)(this);\n\t\t},\n\t\tincremental: true\n\t};\n}\n\nfunction flip<T>(comparator: (a: T, b: T) => number) {\n\treturn function(a: T, b: T) {\n\t\treturn -1 * comparator(a, b);\n\t};\n}\n\nfunction serialize(sort: Sort<any>) {\n\treturn 'sort(' + sort.sortParameters.map((param, index) => {\n\t\tconst descending = isDescending(sort.descending, index);\n\t\treturn (descending ? '-' : '+') + param;\n\t}).join(',')  + ')';\n}\n// the `a == null` check returns `true` when a is `null` or `undefined`.\nfunction sortValue(a: any, b: any, descending: boolean) {\n\tlet comparison: number;\n\ta != null && (a = a.valueOf());\n\tb != null && (b = b.valueOf());\n\tif (a === b) {\n\t\tcomparison = 0;\n\t}\n\telse {\n\t\t// undefined < null < defined\n\t\tconst isALessThanB = typeof a === 'undefined' ||\n\t\t\ta === null && typeof b !== 'undefined' ||\n\t\t\tb != null && a < b;\n\t\tcomparison = descending === isALessThanB ? 1 : -1;\n\t}\n\treturn comparison;\n}\n\nexport default createSort;\n"]}