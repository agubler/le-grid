(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    function shouldRecurseInto(value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    }
    exports.shouldRecurseInto = shouldRecurseInto;
    function isEqual(a, b) {
        if (Array.isArray(a) && Array.isArray(b)) {
            return a.length === b.length && a.every(function (element, i) { return isEqual(element, b[i]); });
        }
        else if (shouldRecurseInto(a) && shouldRecurseInto(b)) {
            var keysForA = Object.keys(a).sort();
            var keysforB = Object.keys(b).sort();
            return isEqual(keysForA, keysforB) && keysForA.every(function (key) { return isEqual(a[key], b[key]); });
        }
        else {
            return a === b;
        }
    }
    exports.isEqual = isEqual;
});
//# sourceMappingURL=utils.js.map