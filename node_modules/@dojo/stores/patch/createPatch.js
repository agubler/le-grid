(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../utils", "./createOperation", "./createJsonPointer"], factory);
    }
})(function (require, exports) {
    "use strict";
    var utils_1 = require("../utils");
    var createOperation_1 = require("./createOperation");
    var createJsonPointer_1 = require("./createJsonPointer");
    function _diff(to, from, startingPath) {
        if (!utils_1.shouldRecurseInto(from) || !utils_1.shouldRecurseInto(to)) {
            return [];
        }
        var path = startingPath || createJsonPointer_1.default();
        var fromKeys = Object.keys(from);
        var toKeys = Object.keys(to);
        var operations = [];
        fromKeys.forEach(function (key) {
            if (!utils_1.isEqual(from[key], to[key])) {
                if ((key in from) && !(key in to)) {
                    operations.push(createOperation_1.default(1 /* Remove */, path.push(key)));
                }
                else if (utils_1.shouldRecurseInto(from[key]) && utils_1.shouldRecurseInto(to[key])) {
                    operations.push.apply(operations, _diff(to[key], from[key], path.push(key)));
                }
                else {
                    operations.push(createOperation_1.default(2 /* Replace */, path.push(key), to[key], undefined, from[key]));
                }
            }
        });
        toKeys.forEach(function (key) {
            if (!(key in from) && (key in to)) {
                operations.push(createOperation_1.default(0 /* Add */, path.push(key), to[key]));
            }
        });
        return operations;
    }
    function diff(to, from) {
        if (from === void 0) { from = {}; }
        return createPatch(_diff(to, from));
    }
    exports.diff = diff;
    function createPatch(operations) {
        return {
            operations: operations,
            apply: function (target) {
                return this.operations.reduce(function (prev, next) { return next.apply(prev); }, target);
            },
            toString: function () {
                return '[' + this.operations.reduce(function (prev, next) {
                    if (prev) {
                        return prev + ',' + next.toString();
                    }
                    else {
                        return next.toString();
                    }
                }, '') + ']';
            }
        };
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createPatch;
});
//# sourceMappingURL=createPatch.js.map